Search.setIndex({"docnames": ["about", "index", "reference/index", "reference/smallworld", "reference/smallworld.analyses", "reference/smallworld.emulators", "reference/smallworld.exceptions", "reference/smallworld.extern.ctypes", "reference/smallworld.hinting", "reference/smallworld.logging", "reference/smallworld.platforms", "reference/smallworld.state", "reference/smallworld.state.cpus", "reference/smallworld.state.memory", "reference/smallworld.state.memory.code", "reference/smallworld.state.memory.heap", "reference/smallworld.state.memory.stack", "reference/smallworld.state.models", "tutorial/analyses", "tutorial/fuzzing", "tutorial/harnessing-a-simple-program", "tutorial/index", "tutorial/local-types-and-the-heap", "tutorial/mapping-memory", "tutorial/modeling-and-hooking", "tutorial/next-steps", "tutorial/putting-it-all-together", "tutorial/quick-install-guide", "tutorial/smallworld-at-a-glance", "usage/analyses", "usage/emulators", "usage/hinting", "usage/index", "usage/platforms", "usage/state"], "filenames": ["about.rst", "index.rst", "reference/index.rst", "reference/smallworld.rst", "reference/smallworld.analyses.rst", "reference/smallworld.emulators.rst", "reference/smallworld.exceptions.rst", "reference/smallworld.extern.ctypes.rst", "reference/smallworld.hinting.rst", "reference/smallworld.logging.rst", "reference/smallworld.platforms.rst", "reference/smallworld.state.rst", "reference/smallworld.state.cpus.rst", "reference/smallworld.state.memory.rst", "reference/smallworld.state.memory.code.rst", "reference/smallworld.state.memory.heap.rst", "reference/smallworld.state.memory.stack.rst", "reference/smallworld.state.models.rst", "tutorial/analyses.rst", "tutorial/fuzzing.rst", "tutorial/harnessing-a-simple-program.rst", "tutorial/index.rst", "tutorial/local-types-and-the-heap.rst", "tutorial/mapping-memory.rst", "tutorial/modeling-and-hooking.rst", "tutorial/next-steps.rst", "tutorial/putting-it-all-together.rst", "tutorial/quick-install-guide.rst", "tutorial/smallworld-at-a-glance.rst", "usage/analyses.rst", "usage/emulators.rst", "usage/hinting.rst", "usage/index.rst", "usage/platforms.rst", "usage/state.rst"], "titles": ["About", "SmallWorld Documentation", "Reference", "smallworld", "smallworld.analyses", "smallworld.emulators", "smallworld.exceptions", "smallworld.extern.ctypes", "smallworld.hinting", "smallworld.logging", "smallworld.platforms", "smallworld.state", "smallworld.state.cpus", "smallworld.state.memory", "smallworld.state.memory.code", "smallworld.state.memory.heap", "smallworld.state.memory.stack", "smallworld.state.models", "Analyses", "Fuzzing", "Harnessing a Simple Program", "Getting Started", "Local Types and the Heap", "Mapping Memory", "Modeling and Hooking", "Next Steps", "Putting it all Together", "Quick Install Guide", "SmallWorld at a Glance", "Analyses", "Emulators", "Hinting", "Using SmallWorld", "Supported Platforms", "State"], "terms": {"distribut": 0, "statement": 0, "A": [0, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 20, 28, 33, 34], "approv": 0, "public": 0, "releas": [0, 20, 27], "i": [0, 1, 4, 5, 6, 8, 11, 12, 13, 14, 16, 17, 20, 27, 28, 30, 33, 34], "unlimit": 0, "thi": [0, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 28, 30, 33, 34], "materi": 0, "base": [0, 5, 6, 8, 11, 12, 13, 30, 34], "upon": 0, "work": [0, 5, 12, 17, 21, 33], "support": [0, 1, 4, 5, 8, 9, 10, 12, 13, 14, 27, 28, 32, 34], "under": [0, 12, 28, 30], "secretari": 0, "defens": 0, "research": 0, "engin": [0, 5, 20, 28, 30], "air": 0, "forc": [0, 4], "contract": 0, "No": [0, 10, 33], "fa8702": 0, "15": 0, "d": [0, 1, 30], "0001": 0, "ani": [0, 4, 5, 7, 8, 11, 13, 16, 17, 20, 28, 33, 34], "opinion": 0, "find": [0, 5], "conclus": 0, "recommend": [0, 4, 5], "express": [0, 5, 6, 11], "ar": [0, 4, 5, 7, 10, 11, 20, 28, 33, 34], "those": [0, 1, 20], "author": [0, 11], "": [0, 5, 7, 11, 13, 14, 17, 20, 22, 23, 24, 30, 33, 34], "do": [0, 4, 7, 11, 12, 13, 28, 30], "necessarili": [0, 5], "reflect": 0, "view": 0, "deliv": 0, "u": [0, 20], "govern": 0, "right": [0, 33], "defin": [0, 4, 7, 8, 13, 17, 20], "dfar": 0, "part": [0, 4, 30, 33], "252": 0, "227": 0, "7013": 0, "7014": 0, "feb": 0, "2014": 0, "notwithstand": 0, "copyright": 0, "notic": 0, "detail": [0, 5, 8, 20, 29, 30, 31], "abov": [0, 34], "us": [0, 1, 4, 5, 7, 8, 11, 13, 14, 17, 20, 26, 28, 30, 33, 34], "other": [0, 4, 9, 11, 12, 13, 20, 28, 30, 33], "than": [0, 5, 11, 20, 33], "specif": [0, 1, 4, 5, 7, 12, 13, 14, 20, 28, 32, 34], "mai": [0, 5, 8, 21, 28, 33], "violat": [0, 20], "exist": [0, 5, 7, 11], "mit": 0, "2023": 0, "massachusett": 0, "institut": 0, "technologi": 0, "permiss": 0, "herebi": 0, "grant": 0, "free": [0, 2, 5, 15, 34], "charg": 0, "person": 0, "obtain": [0, 17, 34], "copi": [0, 4, 5, 20, 34], "softwar": 0, "associ": [0, 7, 13], "document": [0, 11, 25], "file": [0, 8, 11, 13, 14, 20, 33], "deal": [0, 17], "without": 0, "restrict": 0, "includ": [0, 11, 20, 28, 34], "limit": [0, 5, 11], "modifi": [0, 4, 5, 8, 33], "merg": 0, "publish": 0, "sublicens": 0, "sell": 0, "permit": [0, 34], "whom": 0, "furnish": 0, "so": [0, 5, 20, 28, 33, 34], "subject": 0, "follow": [0, 28, 33], "condit": [0, 28], "The": [0, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 20, 28, 30, 33, 34], "shall": 0, "all": [0, 1, 4, 5, 6, 8, 9, 11, 12, 20, 21, 33, 34], "substanti": 0, "portion": 0, "THE": 0, "provid": [0, 4, 5, 8, 17, 20, 28, 30, 33, 34], "AS": 0, "warranti": 0, "OF": 0, "kind": [0, 4, 6, 7, 28], "OR": 0, "impli": 0, "BUT": 0, "NOT": 0, "TO": 0, "merchant": 0, "fit": [0, 28], "FOR": 0, "particular": [0, 4, 17, 20, 33, 34], "purpos": [0, 1, 28, 33], "AND": 0, "noninfring": 0, "IN": 0, "NO": 0, "event": 0, "holder": 0, "BE": [0, 12], "liabl": 0, "claim": 0, "damag": 0, "liabil": 0, "whether": [0, 11, 13], "an": [0, 1, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 20, 28, 30, 33, 34], "action": 0, "tort": 0, "otherwis": [0, 5, 8, 11], "aris": 0, "from": [0, 1, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 27, 28, 30, 33, 34], "out": [0, 5, 6, 11, 20, 28, 34], "connect": 0, "WITH": 0, "environ": [1, 5, 11, 28, 30], "streamlin": [1, 28], "har": [1, 4, 5, 11, 21, 26, 28, 30], "binari": [1, 10, 20, 28], "dynam": [1, 4, 13, 20, 28, 30, 34], "analysi": [1, 2, 3, 4, 5, 6, 8, 11, 20, 28, 29, 33, 34], "If": [1, 4, 5, 8, 11, 12, 13, 17, 20], "you": [1, 4, 5, 6, 11, 17, 20, 21, 28, 33], "have": [1, 4, 5, 7, 11, 12, 17, 20, 21, 28, 30, 33, 34], "code": [1, 2, 3, 4, 5, 11, 17, 20, 27, 28, 30, 33, 34], "got": [1, 28], "somewher": [1, 28], "like": [1, 4, 5, 11, 13, 14, 15, 16, 20, 28, 30, 33], "run": [1, 2, 3, 4, 5, 8, 11, 17, 20, 27, 28, 30, 33, 34], "analyz": [1, 2, 3, 11, 20, 28, 30, 33], "understand": 1, "what": [1, 5, 20, 28], "doe": [1, 33], "ha": [1, 7, 11, 17, 28, 33, 34], "bug": 1, "should": [1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 21], "try": [1, 6, 13], "get": [1, 2, 5, 8, 11, 12, 13, 14, 15, 16, 20, 30, 33], "start": [1, 4, 5, 11, 13, 14, 15, 16, 17, 20, 26, 28, 34], "glanc": [1, 21], "quick": [1, 20, 21], "instal": [1, 21], "guid": [1, 20, 21, 28], "simpl": [1, 4, 15, 21], "program": [1, 4, 8, 21], "map": [1, 4, 5, 8, 13, 17, 20, 21, 30, 34], "memori": [1, 2, 4, 5, 8, 11, 17, 20, 21, 30, 33, 34], "local": [1, 20, 21], "type": [1, 2, 4, 5, 7, 8, 11, 20, 21, 28], "heap": [1, 2, 11, 20, 21, 34], "model": [1, 2, 12, 21, 33], "hook": [1, 2, 5, 17, 21], "analys": [1, 2, 3, 20, 21, 28, 32], "fuzz": [1, 2, 11, 21, 28, 30], "put": [1, 20, 21], "togeth": [1, 21], "next": [1, 20, 21], "step": [1, 2, 4, 5, 11, 20, 21, 30], "state": [1, 2, 3, 4, 5, 20, 30, 32, 33], "emul": [1, 2, 3, 4, 6, 8, 11, 12, 13, 14, 15, 16, 17, 20, 28, 32, 34], "hint": [1, 2, 4, 20, 28, 30, 32], "platform": [1, 2, 4, 5, 11, 12, 13, 14, 16, 17, 20, 32], "note": [1, 4, 9, 11, 17, 20, 32], "isa": [1, 11, 32], "float": [1, 32], "point": [1, 5, 6, 11, 13, 14, 28, 30, 32], "vector": [1, 11, 12, 32], "refer": [1, 7, 11, 13, 14, 25], "log": [1, 2, 8, 20], "cpu": [1, 2, 11, 16, 20, 30, 34], "stack": [1, 2, 11, 20, 23, 33, 34], "except": [1, 2, 5, 8, 11, 12, 33], "extern": [1, 2, 17], "ctype": [1, 2, 11, 15, 16], "about": [1, 4, 5, 8, 11, 18, 19, 20, 21, 28, 29, 31, 34], "disclaim": 1, "smallworld": [2, 20, 21, 26, 27, 30, 33, 34], "setup_log": [2, 9, 20], "messag": [2, 8, 20], "to_dict": [2, 8], "from_dict": [2, 8], "serializ": [2, 8], "get_hint": [2, 8], "setup_hint": [2, 8, 20], "dynamicregistervaluehint": [2, 8, 20], "dynamicmemoryvaluehint": [2, 8], "memoryunavailablehint": [2, 8], "dynamicregistervaluesummaryhint": [2, 8, 20], "dynamicmemoryvaluesummaryhint": [2, 8], "memoryunavailablesummaryhint": [2, 8], "emulationexcept": [2, 6, 8], "coveragehint": [2, 8], "controlflowhint": [2, 8], "reachablecodehint": [2, 8], "defusegraphhint": [2, 8], "hintsubclassfilt": [2, 8], "filter": [2, 3, 4, 8, 20], "architectur": [2, 4, 10, 20, 28, 33], "byteord": [2, 5, 10, 11, 13, 14, 15, 16, 20], "x86_32": [2, 10], "x86_64": [2, 10, 20, 34], "x86_64_avx512": [2, 10], "big": [2, 5, 10, 12, 16, 30, 34], "littl": [2, 5, 10, 12, 13, 16, 20, 28], "middl": [2, 10], "abi": [2, 10, 17, 33], "systemv": [2, 10], "cdecl": [2, 10], "vectorcal": [2, 10], "fastcal": [2, 10], "none": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "registerdef": [2, 10], "registeraliasdef": [2, 10], "read_register_cont": [2, 5], "read_register_symbol": [2, 5], "read_register_typ": [2, 5], "read_register_label": [2, 5], "read_regist": [2, 5, 30], "write_register_cont": [2, 5], "write_register_typ": [2, 5], "write_register_label": [2, 5], "write_regist": [2, 5, 30], "read_memory_cont": [2, 5], "read_memory_symbol": [2, 5], "read_memory_typ": [2, 5], "read_memory_label": [2, 5], "read_memori": [2, 5, 11], "map_memori": [2, 5], "get_memory_map": [2, 5], "write_memory_cont": [2, 5], "write_memory_typ": [2, 5], "write_memory_label": [2, 5], "write_memori": [2, 5], "write_cod": [2, 5], "get_bound": [2, 5, 11], "add_bound": [2, 5, 11], "get_exit_point": [2, 5, 11], "add_exit_point": [2, 5, 11, 20], "step_instruct": [2, 5], "step_block": [2, 5], "descript": [2, 4, 5, 8, 29, 31], "name": [2, 4, 5, 8, 10, 11, 13, 17, 30, 34], "version": [2, 4, 5, 20], "instructionhook": [2, 5], "hook_instruct": [2, 5], "unhook_instruct": [2, 5], "functionhook": [2, 5], "hook_funct": [2, 5], "unhook_funct": [2, 5], "memoryreadhook": [2, 5], "hook_memory_read": [2, 5], "hook_memory_read_symbol": [2, 5], "unhook_memory_read": [2, 5], "hook_memory_reads_symbol": [2, 5], "memorywritehook": [2, 5], "hook_memory_writ": [2, 5], "hook_memory_write_symbol": [2, 5], "unhook_memory_writ": [2, 5], "hook_memory_writes_symbol": [2, 5], "interrupthook": [2, 5], "hook_interrupt": [2, 5], "unhook_interrupt": [2, 5], "constrainedemul": [2, 5], "add_constraint": [2, 5, 11], "get_constraint": [2, 5, 11], "satisfi": [2, 5], "eval_atmost": [2, 5], "eval_atleast": [2, 5], "unicornemul": [2, 5, 20, 30, 34], "unicornemulationerror": [2, 5], "with_traceback": [2, 5, 6], "unicornemulationmemoryreaderror": [2, 5], "unicornemulationmemorywriteerror": [2, 5], "unicornemulationexecutionerror": [2, 5], "angremul": [2, 5], "initi": [2, 4, 5, 13, 20, 28, 30, 34], "hook_syscal": [2, 5], "unhook_syscal": [2, 5], "visit_st": [2, 5], "enable_linear": [2, 5], "add_extens": [2, 5], "get_extens": [2, 5], "pathterminationsign": [2, 5], "ghidraemul": [2, 5], "extract": [2, 11, 12, 13, 14, 15, 16, 17], "appli": [2, 5, 11, 12, 13, 14, 15, 16, 17, 20, 30, 34], "valu": [2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 20, 30, 34], "get_siz": [2, 11], "get_cont": [2, 11], "set_cont": [2, 11], "get_typ": [2, 11], "set_typ": [2, 11], "get_label": [2, 11], "set_label": [2, 11], "set": [2, 5, 6, 7, 8, 11, 12, 17, 20, 28, 33, 34], "to_symbol": [2, 11], "to_byt": [2, 11, 13, 14, 15, 16], "from_ctyp": [2, 11], "integervalu": [2, 11], "bytesvalu": [2, 11], "symbolicvalu": [2, 11], "regist": [2, 4, 5, 6, 8, 11, 12, 17, 20, 30, 33, 34], "size": [2, 5, 8, 10, 11, 13, 14, 15, 16, 17, 20, 34], "registeralia": [2, 11, 34], "offset": [2, 8, 10, 11, 13], "fixedregist": [2, 11], "machin": [2, 3, 4, 5, 11, 20, 33], "add": [2, 4, 5, 11, 12, 20, 28, 34], "clear": [2, 5, 9, 11, 12], "discard": [2, 11, 12], "isdisjoint": [2, 11, 12], "pop": [2, 11, 12, 16, 33, 34], "remov": [2, 5, 9, 11, 12], "fuzz_with_fil": [2, 11], "get_cpu": [2, 11, 20], "get_platform": [2, 11, 12, 16], "for_platform": [2, 12, 16, 20], "aarch64": [2, 12, 33], "amd64": [2, 12, 20, 30, 33], "armv5t": [2, 12, 16], "armv6m": [2, 12, 16], "armv6mthumb": [2, 12], "armv7m": [2, 12, 16], "armv7r": [2, 12, 16], "armv7a": [2, 12, 16], "i386": [2, 12, 33], "mips64el": [2, 12], "mips64b": [2, 12], "mipsel": [2, 12], "mipsb": [2, 12], "powerpc32": [2, 12, 33], "powerpc64": [2, 12, 33], "riscv64": [2, 12, 33], "xtensab": [2, 12], "xtensael": [2, 12], "breakpoint": [2, 17, 30], "pdbbreakpoint": [2, 17], "pythonshellbreakpoint": [2, 17], "lookup": [2, 17], "memorymappedmodel": [2, 17], "on_read": [2, 17], "on_writ": [2, 17], "address": [2, 4, 5, 7, 8, 11, 13, 14, 15, 16, 17, 20, 30, 33, 34], "get_capac": [2, 13, 14, 15, 16, 20], "get_us": [2, 13, 14, 15, 16], "rawmemori": [2, 13, 14], "from_byt": [2, 13, 14], "from_fil": [2, 13, 14], "from_filepath": [2, 13, 14, 20, 30], "elfexecut": [2, 13], "entrypoint": [2, 13, 14, 20], "get_symbol_valu": [2, 13], "from_elf": [2, 13, 14], "from_elf_cor": [2, 13, 14], "from_p": [2, 13, 14], "get_symbol_s": [2, 13], "update_symbol_valu": [2, 13], "link_elf": [2, 13], "elfcorefil": [2, 13, 14], "get_point": [2, 16], "get_align": [2, 16], "push": [2, 16, 33, 34], "push_integ": [2, 16], "push_byt": [2, 16], "push_ctyp": [2, 16], "aarch64stack": [2, 16], "amd64stack": [2, 16], "armv5tstack": [2, 16], "armv6mstack": [2, 16], "armv7mstack": [2, 16], "armv7rstack": [2, 16], "armv7astack": [2, 16], "x86stack": [2, 16], "mipsbestack": [2, 16], "mipselstack": [2, 16], "mips64bestack": [2, 16], "mips64elstack": [2, 16], "powerpc32stack": [2, 16], "powerpc64stack": [2, 16], "riscv64stack": [2, 16], "xtensabestack": [2, 16], "xtensaelstack": [2, 16], "alloc": [2, 5, 15], "allocate_integ": [2, 15], "allocate_byt": [2, 15], "allocate_ctyp": [2, 15], "bumpalloc": [2, 15], "execut": [2, 4, 5, 6, 8, 11, 13, 14, 17, 20, 28, 30, 33, 34], "listen": [2, 4], "activ": [2, 4, 5], "deactiv": [2, 4], "color": [2, 4, 8, 9, 20], "colorizersummari": [2, 4, 20], "colorizerdefus": [2, 4], "fielddetectionanalysi": [2, 4], "forcedfielddetectionanalysi": [2, 4], "forcedexecut": [2, 4], "error": [2, 6, 11, 33], "configurationerror": [2, 6, 11], "emulationerror": [2, 6], "emulationstop": [2, 6], "emulationbound": [2, 6], "emulationexitpoint": [2, 6], "symbolicvalueerror": [2, 5, 6], "unsaterror": [2, 5, 6], "unsupportedregistererror": [2, 6], "analysiserror": [2, 6], "typedpoint": [2, 7], "from_param": [2, 7], "create_typed_point": [2, 7], "asi": 3, "list": [3, 4, 5, 11, 20, 33], "request": [3, 5, 16], "some": [3, 4, 5, 6, 8, 11, 16, 21, 28, 29, 30, 31, 33, 34], "paramet": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17], "class": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 20, 34], "which": [3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 20, 21, 28, 30, 33], "begin": [3, 11], "emit": 4, "inform": [4, 5, 11, 28, 34], "possibli": [4, 28, 30], "help": [4, 20], "abstract": [4, 5, 11, 15, 16, 17, 20, 30, 34], "function": [4, 5, 7, 13, 17, 20], "instead": [4, 17], "coppi": 4, "befor": [4, 5, 11, 27], "modif": 4, "object": [4, 5, 7, 11, 12, 13, 14, 15, 16, 17, 30, 34], "properti": [4, 5, 7, 16, 17], "str": [4, 5, 8, 10, 11, 13, 14, 15, 16, 17], "singl": [4, 5, 11, 13, 20, 30, 33], "sentenc": [4, 5], "lowercas": [4, 5, 10], "final": [4, 5, 11, 20, 34], "punctuat": [4, 5], "proper": [4, 5], "format": [4, 5, 33], "kebab": [4, 5, 10], "case": [4, 5, 10], "whitespac": [4, 5], "string": [4, 5, 11, 13, 14, 15, 16], "we": [4, 5, 8, 11, 12, 20, 28, 30, 33, 34], "semant": [4, 5, 17, 28], "consum": [4, 30], "sometim": 4, "produc": [4, 17], "addit": [4, 5, 34], "stream": [4, 8, 20], "new": [4, 8, 11, 12, 13, 20], "higher": [4, 28], "level": [4, 8, 9, 20, 28, 34], "synthet": 4, "These": [4, 5, 34], "inspect": [4, 28, 34], "directli": [4, 7, 33], "thei": [4, 5, 11, 28, 30, 33, 34], "just": [4, 5, 13, 20, 21], "react": 4, "method": [4, 5, 8, 11, 17, 30, 34], "callabl": [4, 5, 11, 17], "trigger": [4, 5, 17], "subclass": [4, 5, 7, 11, 34], "call": [4, 5, 7, 8, 9, 11, 17, 20, 33], "when": [4, 5, 6, 11, 17, 20], "given": [4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 28], "observ": [4, 20], "implement": [4, 5, 8, 12, 17, 33], "make": [4, 17, 20, 28], "necessari": 4, "here": [4, 20, 30, 34], "unregist": 4, "automat": [4, 5, 8], "destruct": 4, "manual": [4, 28], "done": 4, "shouldn": 4, "t": [4, 5, 20, 33], "need": [4, 5, 7, 11, 12, 33], "arg": [4, 7, 8, 13, 14, 15, 16], "num_micro_execut": [4, 8, 20], "int": [4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 20], "10": [4, 20, 27], "num_insn": 4, "200": 4, "seed": 4, "99": 4, "kwarg": [4, 7, 8, 13, 14, 15, 16], "data": [4, 5, 7, 11, 13, 14, 15, 34], "flow": [4, 8, 20], "via": [4, 11, 20], "track": [4, 5, 28], "distinct": 4, "emploi": [4, 20, 30], "instruct": [4, 5, 8, 11, 17, 20, 28, 30, 33], "def": [4, 5, 8, 20], "multipl": [4, 5, 17, 33], "micro": [4, 8, 20, 28], "same": [4, 20], "entri": [4, 13, 14, 30, 33], "At": [4, 34], "each": [4, 11], "random": [4, 20, 28, 30], "alreadi": [4, 5, 7, 11], "been": 4, "maintain": 4, "where": [4, 5, 10, 11, 13, 14, 17, 34], "first": [4, 10, 20, 27], "them": [4, 5, 11, 20, 33, 34], "empti": [4, 11, 12], "examin": [4, 28, 30], "read": [4, 5, 8, 11, 13, 14, 17, 20, 21, 25, 30], "sight": 4, "effect": [4, 11, 12, 33], "time": [4, 11, 30], "place": [4, 8, 20, 34], "wa": [4, 5, 8, 15], "similarli": [4, 11], "after": [4, 5, 11, 16, 20, 21, 34], "everi": [4, 5, 11, 33], "written": [4, 5, 13, 14, 15, 16, 17, 28, 33, 34], "comput": 4, "result": [4, 17, 20], "its": [4, 5, 8, 11, 13, 28, 30, 33, 34], "creation": [4, 20, 28, 34], "noth": [4, 20, 28], "sinc": [4, 7, 12, 20, 33], "whilst": 4, "look": [4, 5, 13, 20, 33], "write": [4, 5, 8, 15, 17, 20, 30, 34], "correspond": [4, 20], "unavail": [4, 8, 11], "number": [4, 5, 8, 11, 13, 14, 15, 16, 17, 20, 30, 33], "test": [4, 5, 20, 30, 33], "stabil": 4, "detect": 4, "field": [4, 7], "full": [4, 33], "path": [4, 5, 8, 11, 13, 14], "explor": 4, "underlai": 4, "overlai": 4, "exercis": 4, "trace": 4, "dict": [4, 5, 8], "angr": [4, 5, 11, 20, 28, 33], "allow": [4, 5, 8, 17, 34], "arbitrari": 4, "slice": 4, "visit": [4, 5], "ignor": 4, "normal": [4, 17], "control": [4, 8], "compat": [4, 5, 11, 20, 33], "delai": 4, "slot": 4, "mip": [4, 12, 16, 30], "can": [4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 20, 21, 28, 33, 34], "want": [4, 5, 21, 28], "counter": [4, 8], "metadata": [5, 10, 11], "content": [5, 11, 15, 16, 20, 30], "return": [5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 20], "rais": [5, 6, 11, 12, 33], "contain": [5, 8, 11, 13, 15, 17, 34], "non": 5, "collaps": [5, 6], "symbol": [5, 6, 8, 11, 13], "bv": [5, 11], "output": [5, 20, 28, 30], "must": [5, 11, 17, 27], "z3": 5, "behavior": [5, 17], "option": [5, 11, 13, 14, 33], "label": [5, 11, 13, 14, 15, 16], "helper": [5, 11], "bitvector": [5, 11], "doesn": [5, 33], "To": [5, 20, 27], "unset": 5, "typeerror": 5, "cannot": [5, 33], "handl": [5, 8, 9, 13, 17, 33], "byte": [5, 8, 11, 13, 14, 15, 16, 17, 34], "region": [5, 11, 13, 14, 15, 16, 17, 33, 34], "rang": [5, 11, 17], "8": [5, 11, 20, 30, 34], "bit": [5, 10, 11, 12, 16, 20, 34], "overlap": 5, "fill": [5, 7, 13, 14, 15, 16], "gap": [5, 7], "tupl": [5, 11], "retriev": [5, 11, 16], "understood": 5, "end": [5, 11, 20, 34], "segment": 5, "take": [5, 10, 20], "advantag": 5, "store": [5, 8, 13, 14, 15, 16], "differ": [5, 12, 30], "ident": 5, "bound": [5, 6, 7, 11], "valid": 5, "leav": 5, "emulationboundserror": 5, "specifi": [5, 8, 12, 13, 17, 34], "anywher": [5, 33], "exit": [5, 6, 11], "reach": [5, 8, 17], "stop": [5, 6, 11, 17], "block": 5, "indefinit": 5, "mixin": 5, "exampl": [5, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 34], "unhook": 5, "system": [5, 10, 11, 13, 27, 33], "interrupt": [5, 33], "current": [5, 7, 11, 13, 16, 27, 28, 30, 33], "essenti": 5, "replac": [5, 20], "within": [5, 17], "concret": [5, 6, 8, 11, 17, 34], "repres": [5, 7, 8, 11, 30, 34], "would": [5, 11, 30], "fetch": 5, "report": 5, "origin": [5, 6], "notimplementederror": 5, "oper": [5, 15, 16, 17, 33], "claripi": 5, "ast": 5, "guest": 5, "handler": [5, 9, 17], "respons": [5, 17], "complet": [5, 20], "global": 5, "interupt": 5, "constraint": [5, 6, 11], "It": [5, 11, 13, 17, 20, 33, 34], "also": [5, 10, 13, 20, 30, 33, 34], "mean": [5, 13, 28, 30, 33], "evalu": [5, 11], "probabl": [5, 20, 33], "smt": 5, "solver": 5, "similar": 5, "expr": [5, 11], "bool": [5, 8, 9, 11, 13, 14], "possibl": [5, 7, 11, 30], "unbound": [5, 11], "variabl": [5, 7, 11, 20, 33, 34], "onli": [5, 8, 9, 11, 12, 20, 27, 30, 33], "consid": [5, 11], "true": [5, 8, 9, 11, 12, 13, 20], "boolean": [5, 11], "easiest": [5, 11], "form": [5, 10, 11], "equal": [5, 11], "inequ": [5, 11], "two": [5, 11, 12, 20, 34], "extra_constraint": 5, "check": 5, "wai": [5, 20, 28], "assign": [5, 17], "describ": [5, 20], "own": 5, "ad": [5, 12, 20], "built": [5, 28], "up": [5, 8, 20, 33, 34], "dur": 5, "caller": 5, "perman": 5, "fals": [5, 8, 9, 11, 13, 14, 20], "most": [5, 10, 17, 33], "maximum": 5, "solut": 5, "attempt": [5, 17, 20, 27, 33], "between": 5, "1": [5, 11, 20], "inclus": 5, "more": [5, 11, 20, 28, 33, 34], "upper": [5, 33], "integ": [5, 11, 13, 15, 16], "least": [5, 10, 33], "minimum": 5, "fewer": 5, "unicorn": [5, 11, 12, 20, 28, 30, 33], "intno": 5, "uc_err": 5, "ucerror": 5, "pc": [5, 8, 20], "msg": 5, "tb": [5, 6], "self": [5, 6, 17, 20], "__traceback__": [5, 6], "preinit": 5, "init": 5, "primarili": 5, "design": [5, 7], "although": [5, 13], "configur": [5, 6, 10, 20], "howev": [5, 28], "One": 5, "challeng": 5, "rather": 5, "parallel": 5, "As": [5, 17, 28], "interfac": [5, 10, 29, 30, 31, 33, 34], "yet": [5, 17], "fulli": [5, 17], "featur": [5, 33], "one": [5, 6, 11, 13, 17, 20, 30, 33, 34], "cle": 5, "know": [5, 20], "chang": [5, 20, 30, 33], "requir": [5, 28], "access": [5, 17, 34], "order": [5, 11, 17, 20, 30, 34], "how": [5, 12, 20, 28, 33, 34], "collect": [5, 28], "onc": [5, 8, 9, 20, 30], "invok": 5, "cycl": 5, "re": [5, 27], "earli": 5, "syscal": [5, 33], "fire": 5, "hit": [5, 6, 8, 11], "resum": [5, 11], "stash": 5, "select": 5, "frontier": 5, "let": [5, 17, 20], "around": [5, 22, 23, 24], "fact": 5, "linear": 5, "mode": [5, 8, 9, 10, 12, 30, 34], "enabl": [5, 8, 9], "actual": [5, 8, 17, 28], "anyth": [5, 20], "kill": 5, "unconstrain": 5, "branch": 5, "ext": 5, "extra": [5, 8], "user": [5, 13, 33], "tie": 5, "structur": [5, 13, 15, 16, 28, 34], "extens": [5, 10, 12, 33], "ti": [5, 34], "usual": [5, 13, 33], "perfectli": [5, 20], "later": 5, "either": [5, 8, 28], "through": [5, 20, 21, 33], "stub": 5, "deepcopi": 5, "id": [5, 13, 14], "keyerror": [5, 11, 12], "taken": 5, "whatev": 5, "liter": 5, "appropri": [5, 8, 17], "termin": 5, "abstractghidraemul": 5, "factori": 5, "creat": [5, 7, 11, 12, 16, 20, 30, 34], "import": [5, 20, 30, 34], "pyghidra": 5, "packag": [5, 12, 20, 27], "boot": 5, "jvm": 5, "sever": 5, "second": 5, "java": 5, "ghidra": [5, 28, 33], "sit": 5, "process": 5, "export": 5, "exactli": [5, 20], "constructor": 5, "success": 5, "see": [5, 11], "pcode": [5, 12, 20], "py": [5, 20], "actua": 5, "common": 6, "problem": 6, "fail": 6, "goe": 6, "underli": [6, 33], "wrap": 6, "known": [6, 8, 10, 33], "thrown": 6, "unsatisfi": 6, "ask": 6, "unsupport": 6, "pointer": [7, 16, 20, 34], "abil": 7, "direct": 7, "python": [7, 11, 17, 27, 28], "c_void_p": 7, "correct": 7, "instanti": [7, 17], "referenc": [7, 11], "instanc": [7, 11, 12], "your": [7, 27], "convert": [7, 8, 11, 13, 14, 15, 16], "definit": 7, "void": 7, "c_char": 7, "c_char_p": 7, "c_wchar": 7, "c_wchar_p": 7, "dictionari": 8, "trivial": 8, "serial": 8, "classmethod": [8, 11, 12, 13, 14, 16, 17], "load": [8, 11, 12, 13, 14, 15, 16, 17, 20, 30, 33, 34], "construct": [8, 11, 34], "descend": 8, "below": 8, "deseri": 8, "json": 8, "encod": [8, 17, 33], "decod": [8, 33], "hinter": 8, "root": [8, 9], "20": [8, 9], "verbos": [8, 9, 20], "modul": [8, 9], "micro_exec_num": [8, 20], "instruction_num": [8, 20], "dynamic_valu": [8, 20], "reg_nam": [8, 20], "encount": 8, "dure": 8, "els": 8, "capstone_instruct": 8, "capston": [8, 28], "parlanc": 8, "instr": 8, "count": [8, 20], "info": [8, 11, 20], "avail": [8, 11, 13, 14, 27, 34], "index": [8, 13], "scale": 8, "0": [8, 11, 20], "is_read": 8, "base_reg_nam": 8, "base_reg_v": 8, "index_reg_nam": 8, "index_reg_v": 8, "someth": [8, 33], "went": 8, "wrong": [8, 28], "coverag": [8, 28], "hold": [8, 11, 13], "from_instruct": 8, "to_instruct": 8, "go": [8, 15], "indic": [8, 28, 34], "graph": 8, "networkx": 8, "multidigraph": 8, "custom": 8, "record": [8, 11, 13], "determin": [8, 20, 28], "deem": 8, "setup": [9, 20], "logger": 9, "storag": 10, "endian": [10, 12, 16, 34], "arch": [10, 30, 34], "_": 10, "match": [10, 13], "regex": 10, "z0": 10, "9": [10, 20], "x86": [10, 20, 34], "32": [10, 12, 16, 20, 34], "sse": [10, 33], "64": [10, 12, 16, 20, 34], "avx2": [10, 33], "avx512": [10, 33], "signific": 10, "pdp": 10, "applic": [10, 28, 33], "z": 10, "v": 10, "microsoft": 10, "parent": 10, "whose": 11, "reprens": 11, "human": 11, "occupi": 11, "For": [11, 27, 28], "unlabel": 11, "convers": [11, 13, 14, 15, 16], "both": [11, 27], "raw": [11, 13, 14, 15, 16], "arguement": [11, 15], "reutrn": 11, "sign": 11, "pass": 11, "care": 11, "thing": [11, 30, 33], "width": [11, 34], "deriv": 11, "2": [11, 20], "4": [11, 20], "bytearrai": [11, 15, 16], "intern": 11, "represent": 11, "default": [11, 12], "zero": [11, 13, 14, 15, 16, 20, 30, 34], "typedef": 11, "individu": 11, "canon": 11, "alia": [11, 33], "partial": 11, "cannon": 11, "fix": 11, "hard": 11, "wire": 11, "nice": 11, "rememb": 11, "even": [11, 17, 28, 33], "caus": 11, "side": 11, "outsid": 11, "exclud": 11, "bind": 11, "item": [11, 12], "element": [11, 12], "slow": [11, 12], "n": [11, 12], "iter": [11, 12, 28], "absent": [11, 12], "null": [11, 12], "intersect": [11, 12], "member": [11, 12], "gener": [11, 12, 17, 20, 28, 33, 34], "yield": 11, "previou": 11, "forward": 11, "input_callback": 11, "crash_callback": 11, "always_valid": 11, "unicornafl": 11, "callback": [11, 17], "input": [11, 20, 28], "input_file_path": 11, "afl": 11, "mutat": 11, "assum": [11, 20, 28], "argv": [11, 20], "decid": 11, "crash": [11, 33], "fork": 11, "child": 11, "attach": 11, "throw": 11, "specific": 12, "desir": 12, "auto": 12, "v8a": 12, "languag": [12, 33], "le": 12, "arm64_const": 12, "becaus": 12, "avx": 12, "keep": 12, "old": 12, "ones": 12, "armv6": 12, "m": [12, 33], "thumb": 12, "armv7": 12, "r": 12, "mips32": [12, 33], "mips_const": 12, "powerpc": 12, "implicitli": 13, "miss": [13, 14, 15, 16], "undefin": [13, 14, 15, 16, 17], "space": [13, 14, 15, 16, 33], "total": [13, 14, 15, 16], "arrai": [13, 14], "contstruct": [13, 14], "binaryio": [13, 14], "open": [13, 14, 17, 33], "pars": [13, 14], "ignore_platform": [13, 14], "user_bas": 13, "page_s": [13, 14], "4096": [13, 14, 20], "elf": [13, 14], "perform": [13, 20], "reloc": 13, "kernel": 13, "intend": [13, 16, 20], "imag": 13, "header": [13, 14], "verif": [13, 14], "verifi": 13, "page": [13, 14], "rebas": 13, "precis": 13, "vari": [13, 33], "tabl": [13, 33], "static": [13, 28, 33], "rel": 13, "skip": [13, 14], "core": [13, 14, 33], "dump": [13, 14], "et_cor": [13, 14], "pe": [13, 14], "elfsymbol": 13, "updat": [13, 20], "alter": 13, "propag": 13, "accord": [13, 17], "link": [13, 25], "against": [13, 28], "anoth": [13, 20], "roughli": 13, "mimic": 13, "linker": 13, "tri": 13, "popul": 13, "draw": [13, 30], "extend": 13, "loader": 13, "execu": 14, "piec": [14, 26], "conveni": [15, 16, 20, 34], "previous": 15, "give": [15, 33], "bump": 15, "align": 16, "arm": [16, 30, 33], "amd": 16, "intel": 16, "ppc": 16, "riscv": 16, "xtensa": [16, 33], "interact": [17, 33], "shell": 17, "pdb": 17, "runtim": [17, 20], "often": 17, "e": [17, 28, 34], "g": [17, 28, 34], "libc": 17, "fread": 17, "argument": [17, 20, 34], "reason": [17, 20, 30], "ioctl": 17, "knowledg": 17, "well": [17, 34], "io": 17, "devic": [17, 33], "altern": 17, "routin": 17, "addressess": 17, "bypass": 17, "suggest": 17, "mmio": [17, 33], "peripher": 17, "entir": [17, 20], "adjac": 17, "emu": [17, 30, 34], "addr": 17, "unus": 17, "insid": 17, "mediat": 17, "come": [18, 19, 22, 23, 24, 25, 26, 29, 31], "soon": [18, 19, 22, 23, 24, 25, 26, 29, 31], "tutori": [18, 19, 20, 26], "variou": [18, 20, 28, 30, 33], "In": [20, 30, 33, 34], "veri": [20, 33], "snippet": 20, "weigh": 20, "line": [20, 30], "assembli": 20, "squar": [20, 30], "edi": [20, 30], "product": 20, "eax": [20, 30, 34], "imul": 20, "mov": 20, "found": [20, 33], "directori": 20, "repositori": [20, 28], "There": 20, "small": [20, 33], "along": 20, "makefil": 20, "involv": 20, "bin": [20, 30], "basic": [20, 28], "script": [20, 28, 30], "basic_har": 20, "live": 20, "That": [20, 30], "fairli": 20, "sy": 20, "debug": [20, 28], "0x1000": [20, 30, 34], "our": [20, 27, 30, 33], "rip": 20, "union": 20, "explanatori": 20, "lot": 20, "low": 20, "concept": [20, 21], "idea": 20, "think": 20, "agnost": 20, "could": [20, 28, 30], "explic": 20, "might": [20, 30], "better": [20, 30], "last": 20, "commandlin": 20, "python3": 20, "basic_harnesss": 20, "home": 20, "na28046": 20, "lib": 20, "site": 20, "googl": 20, "protobuf": 20, "runtime_vers": 20, "98": 20, "userwarn": 20, "gencod": 20, "5": 20, "28": 20, "major": [20, 27], "older": 20, "6": 20, "30": 20, "proto": 20, "primit": 20, "pleas": 20, "avoid": 20, "warn": 20, "cfg": 20, "xref": 20, "exec": 20, "instr_count": 20, "10593900825472401408": 20, "csinsn": 20, "0fafff": 20, "9302382461390422016": 20, "4099": 20, "0x1003": 20, "89f8": 20, "520914507199938560": 20, "14536414601127395328": 20, "3": [20, 27], "1037872301548240896": 20, "6179300496797335552": 20, "2310751813235638272": 20, "2560094352898523136": 20, "4200596891592818688": 20, "10468425486223540224": 20, "7928558999065067520": 20, "17077435867552808960": 20, "7": 20, "6217772060760866816": 20, "18068901854921621504": 20, "9280604928500301824": 20, "17220918389766094848": 20, "4780529390515650560": 20, "2047011310540947456": 20, "14077934998422290432": 20, "18435414675832176640": 20, "summari": 20, "back": [20, 34], "per": 20, "input_color": 20, "inputusehint": 20, "interpret": 20, "tell": 20, "realli": 20, "explicitli": 20, "now": [20, 27, 28], "__file__": 20, "panda": [20, 28, 33], "rdi": 20, "final_machin": 20, "print": [20, 30], "hex": 20, "simpli": 20, "42": 20, "0x6e4": 20, "1764": 20, "jump": 21, "prerequisit": [21, 28], "narr": [22, 23, 24], "struct": 22, "further": 25, "finish": 26, "showcas": 26, "everyth": 26, "malwar": 26, "window": [27, 33], "linux": 27, "pip": 27, "sourc": 27, "pypi": 27, "clone": 27, "git": 27, "github": 27, "com": 27, "repo": 27, "imagin": 28, "ida": 28, "pro": 28, "But": 28, "programmat": 28, "Or": [28, 30], "taint": 28, "arrang": 28, "met": 28, "suit": 28, "api": 28, "facilit": 28, "addition": [28, 34], "tailor": 28, "analyt": [28, 34], "techniqu": 28, "short": 28, "stretch": 28, "layout": 28, "etc": 28, "disassembli": 28, "varieti": 28, "workflow": 28, "stock": 28, "explain": 28, "incomplet": 28, "refin": 28, "until": [28, 33], "stabl": 28, "criterion": 28, "revers": [28, 30], "matur": 28, "usag": [29, 31], "plai": 30, "role": 30, "On": 30, "hand": 30, "build": [30, 33], "intermedi": 30, "situat": 30, "mani": [30, 33], "campaign": 30, "improv": 30, "best": 30, "word": 30, "awai": 30, "larg": [30, 33], "amd64cpust": [30, 34], "zeroiniti": [30, 34], "hood": 30, "expect": 30, "finali": 30, "were": 30, "And": 30, "tool": 33, "sadli": 33, "brief": 33, "snapshot": 33, "ye": 33, "imposs": 33, "v5t": 33, "v6m": 33, "v7a": 33, "v7m": 33, "v7r": 33, "mips32r2": 33, "el": 33, "mips64r2": 33, "strictli": 33, "few": 33, "privileg": 33, "processor": 33, "fidel": 33, "drastic": 33, "approxim": 33, "certain": 33, "complex": 33, "top": 33, "qemu": 33, "unexpect": 33, "advanc": 33, "familiar": 33, "unlock": 33, "arm32": 33, "appear": 33, "v7": 33, "mash": 33, "v6": 33, "seri": 33, "unknown": 33, "mips64": 33, "physic": 33, "half": 33, "reserv": 33, "made": 33, "incredibli": 33, "assembl": 33, "haven": 33, "standard": 33, "still": 33, "being": [33, 34], "develop": 33, "convent": 33, "guess": 33, "proprietari": 33, "introduc": 33, "manufactur": 33, "depend": 33, "hardwar": 33, "_not_": 33, "esp32": 33, "soc": 33, "untranslat": 33, "sparc64": 33, "variant": 33, "save": 33, "restor": 33, "frame": 33, "compar": 33, "userspac": 33, "spill": 33, "onto": 33, "relev": 33, "scalar": 33, "subsystem": 33, "much": 33, "untest": 33, "b": 33, "expos": 33, "subsytem": 33, "x87": 33, "mmx": 33, "doubl": 33, "quad": 33, "special": 33, "fpu": 33, "ve": 33, "gotten": 33, "prior": 34, "anlaysi": 34, "serv": 34, "benefit": 34, "pre": 34, "post": 34, "triag": 34, "meet": 34, "lowest": 34, "getter": 34, "setter": 34, "ing": 34, "edx": 34, "16": 34, "subregist": 34, "ax": 34, "rax": 34, "litt": 34, "ping": 34, "natur": 34, "malloc": 34, "simplifi": 34, "thu": 34, "mutabl": 34, "ped": 34, "0x11111111": 34, "0x2000": 34, "0x231": 34, "rsp": 34}, "objects": {"": [[3, 0, 0, "-", "smallworld"]], "smallworld": [[4, 0, 0, "-", "analyses"], [3, 4, 1, "", "analyze"], [5, 0, 0, "-", "emulators"], [6, 0, 0, "-", "exceptions"], [8, 0, 0, "-", "hinting"], [9, 0, 0, "-", "logging"], [10, 0, 0, "-", "platforms"], [11, 0, 0, "-", "state"]], "smallworld.analyses": [[4, 1, 1, "", "Analysis"], [4, 1, 1, "", "Colorizer"], [4, 1, 1, "", "ColorizerDefUse"], [4, 1, 1, "", "ColorizerSummary"], [4, 1, 1, "", "FieldDetectionAnalysis"], [4, 1, 1, "", "Filter"], [4, 1, 1, "", "ForcedExecution"], [4, 1, 1, "", "ForcedFieldDetectionAnalysis"]], "smallworld.analyses.Analysis": [[4, 2, 1, "", "description"], [4, 2, 1, "", "name"], [4, 3, 1, "", "run"], [4, 2, 1, "", "version"]], "smallworld.analyses.Colorizer": [[4, 3, 1, "", "run"]], "smallworld.analyses.ColorizerDefUse": [[4, 3, 1, "", "activate"], [4, 3, 1, "", "deactivate"], [4, 3, 1, "", "listen"]], "smallworld.analyses.ColorizerSummary": [[4, 3, 1, "", "activate"], [4, 3, 1, "", "deactivate"], [4, 3, 1, "", "listen"]], "smallworld.analyses.FieldDetectionAnalysis": [[4, 2, 1, "", "emulator"], [4, 3, 1, "", "execute"], [4, 3, 1, "", "run"]], "smallworld.analyses.Filter": [[4, 3, 1, "", "activate"], [4, 3, 1, "", "deactivate"], [4, 2, 1, "", "description"], [4, 3, 1, "", "listen"], [4, 2, 1, "", "name"], [4, 2, 1, "", "version"]], "smallworld.analyses.ForcedExecution": [[4, 2, 1, "", "emulator"], [4, 3, 1, "", "execute"], [4, 3, 1, "", "run"]], "smallworld.analyses.ForcedFieldDetectionAnalysis": [[4, 2, 1, "", "emulator"], [4, 3, 1, "", "execute"], [4, 3, 1, "", "run"]], "smallworld.emulators": [[5, 1, 1, "", "AngrEmulator"], [5, 1, 1, "", "ConstrainedEmulator"], [5, 1, 1, "", "Emulator"], [5, 1, 1, "", "FunctionHookable"], [5, 4, 1, "", "GhidraEmulator"], [5, 1, 1, "", "InstructionHookable"], [5, 1, 1, "", "InterruptHookable"], [5, 1, 1, "", "MemoryReadHookable"], [5, 1, 1, "", "MemoryWriteHookable"], [5, 5, 1, "", "PathTerminationSignal"], [5, 5, 1, "", "UnicornEmulationError"], [5, 5, 1, "", "UnicornEmulationExecutionError"], [5, 5, 1, "", "UnicornEmulationMemoryReadError"], [5, 5, 1, "", "UnicornEmulationMemoryWriteError"], [5, 1, 1, "", "UnicornEmulator"]], "smallworld.emulators.AngrEmulator": [[5, 3, 1, "", "add_bound"], [5, 3, 1, "", "add_constraint"], [5, 3, 1, "", "add_exit_point"], [5, 3, 1, "", "add_extension"], [5, 2, 1, "", "byteorder"], [5, 3, 1, "", "enable_linear"], [5, 3, 1, "", "eval_atleast"], [5, 3, 1, "", "eval_atmost"], [5, 3, 1, "", "get_bounds"], [5, 3, 1, "", "get_constraints"], [5, 3, 1, "", "get_exit_points"], [5, 3, 1, "", "get_extension"], [5, 3, 1, "", "get_memory_map"], [5, 3, 1, "", "hook_function"], [5, 3, 1, "", "hook_instruction"], [5, 3, 1, "", "hook_memory_read"], [5, 3, 1, "", "hook_memory_read_symbolic"], [5, 3, 1, "", "hook_memory_reads"], [5, 3, 1, "", "hook_memory_reads_symbolic"], [5, 3, 1, "", "hook_memory_write"], [5, 3, 1, "", "hook_memory_write_symbolic"], [5, 3, 1, "", "hook_memory_writes"], [5, 3, 1, "", "hook_memory_writes_symbolic"], [5, 3, 1, "", "hook_syscall"], [5, 3, 1, "", "hook_syscalls"], [5, 3, 1, "", "initialize"], [5, 3, 1, "", "map_memory"], [5, 3, 1, "", "read_memory"], [5, 3, 1, "", "read_memory_content"], [5, 3, 1, "", "read_memory_label"], [5, 3, 1, "", "read_memory_symbolic"], [5, 3, 1, "", "read_memory_type"], [5, 3, 1, "", "read_register"], [5, 3, 1, "", "read_register_content"], [5, 3, 1, "", "read_register_label"], [5, 3, 1, "", "read_register_symbolic"], [5, 3, 1, "", "read_register_type"], [5, 3, 1, "", "run"], [5, 3, 1, "", "satisfiable"], [5, 3, 1, "", "step"], [5, 3, 1, "", "step_block"], [5, 3, 1, "", "step_instruction"], [5, 3, 1, "", "unhook_function"], [5, 3, 1, "", "unhook_instruction"], [5, 3, 1, "", "unhook_instructions"], [5, 3, 1, "", "unhook_memory_read"], [5, 3, 1, "", "unhook_memory_reads"], [5, 3, 1, "", "unhook_memory_write"], [5, 3, 1, "", "unhook_memory_writes"], [5, 3, 1, "", "unhook_syscall"], [5, 3, 1, "", "unhook_syscalls"], [5, 3, 1, "", "visit_states"], [5, 3, 1, "", "write_code"], [5, 3, 1, "", "write_memory"], [5, 3, 1, "", "write_memory_content"], [5, 3, 1, "", "write_memory_label"], [5, 3, 1, "", "write_memory_type"], [5, 3, 1, "", "write_register"], [5, 3, 1, "", "write_register_content"], [5, 3, 1, "", "write_register_label"], [5, 3, 1, "", "write_register_type"]], "smallworld.emulators.ConstrainedEmulator": [[5, 3, 1, "", "add_constraint"], [5, 3, 1, "", "eval_atleast"], [5, 3, 1, "", "eval_atmost"], [5, 3, 1, "", "get_constraints"], [5, 3, 1, "", "satisfiable"]], "smallworld.emulators.Emulator": [[5, 3, 1, "", "add_bound"], [5, 3, 1, "", "add_exit_point"], [5, 2, 1, "", "description"], [5, 3, 1, "", "get_bounds"], [5, 3, 1, "", "get_exit_points"], [5, 3, 1, "", "get_memory_map"], [5, 3, 1, "", "map_memory"], [5, 2, 1, "", "name"], [5, 3, 1, "", "read_memory"], [5, 3, 1, "", "read_memory_content"], [5, 3, 1, "", "read_memory_label"], [5, 3, 1, "", "read_memory_symbolic"], [5, 3, 1, "", "read_memory_type"], [5, 3, 1, "", "read_register"], [5, 3, 1, "", "read_register_content"], [5, 3, 1, "", "read_register_label"], [5, 3, 1, "", "read_register_symbolic"], [5, 3, 1, "", "read_register_type"], [5, 3, 1, "", "run"], [5, 3, 1, "", "step"], [5, 3, 1, "", "step_block"], [5, 3, 1, "", "step_instruction"], [5, 2, 1, "", "version"], [5, 3, 1, "", "write_code"], [5, 3, 1, "", "write_memory"], [5, 3, 1, "", "write_memory_content"], [5, 3, 1, "", "write_memory_label"], [5, 3, 1, "", "write_memory_type"], [5, 3, 1, "", "write_register"], [5, 3, 1, "", "write_register_content"], [5, 3, 1, "", "write_register_label"], [5, 3, 1, "", "write_register_type"]], "smallworld.emulators.FunctionHookable": [[5, 3, 1, "", "hook_function"], [5, 3, 1, "", "unhook_function"]], "smallworld.emulators.InstructionHookable": [[5, 3, 1, "", "hook_instruction"], [5, 3, 1, "", "unhook_instruction"], [5, 3, 1, "", "unhook_instructions"]], "smallworld.emulators.InterruptHookable": [[5, 3, 1, "", "hook_interrupt"], [5, 3, 1, "", "hook_interrupts"], [5, 3, 1, "", "unhook_interrupt"], [5, 3, 1, "", "unhook_interrupts"]], "smallworld.emulators.MemoryReadHookable": [[5, 3, 1, "", "hook_memory_read"], [5, 3, 1, "", "hook_memory_read_symbolic"], [5, 3, 1, "", "hook_memory_reads"], [5, 3, 1, "", "hook_memory_reads_symbolic"], [5, 3, 1, "", "unhook_memory_read"], [5, 3, 1, "", "unhook_memory_reads"]], "smallworld.emulators.MemoryWriteHookable": [[5, 3, 1, "", "hook_memory_write"], [5, 3, 1, "", "hook_memory_write_symbolic"], [5, 3, 1, "", "hook_memory_writes"], [5, 3, 1, "", "hook_memory_writes_symbolic"], [5, 3, 1, "", "unhook_memory_write"], [5, 3, 1, "", "unhook_memory_writes"]], "smallworld.emulators.PathTerminationSignal": [[5, 3, 1, "", "with_traceback"]], "smallworld.emulators.UnicornEmulationError": [[5, 3, 1, "", "with_traceback"]], "smallworld.emulators.UnicornEmulationExecutionError": [[5, 3, 1, "", "with_traceback"]], "smallworld.emulators.UnicornEmulationMemoryReadError": [[5, 3, 1, "", "with_traceback"]], "smallworld.emulators.UnicornEmulationMemoryWriteError": [[5, 3, 1, "", "with_traceback"]], "smallworld.emulators.UnicornEmulator": [[5, 3, 1, "", "add_bound"], [5, 3, 1, "", "add_exit_point"], [5, 3, 1, "", "get_bounds"], [5, 3, 1, "", "get_exit_points"], [5, 3, 1, "", "get_memory_map"], [5, 3, 1, "", "hook_function"], [5, 3, 1, "", "hook_instruction"], [5, 3, 1, "", "hook_interrupt"], [5, 3, 1, "", "hook_interrupts"], [5, 3, 1, "", "hook_memory_read"], [5, 3, 1, "", "hook_memory_read_symbolic"], [5, 3, 1, "", "hook_memory_reads"], [5, 3, 1, "", "hook_memory_reads_symbolic"], [5, 3, 1, "", "hook_memory_write"], [5, 3, 1, "", "hook_memory_write_symbolic"], [5, 3, 1, "", "hook_memory_writes"], [5, 3, 1, "", "hook_memory_writes_symbolic"], [5, 3, 1, "", "map_memory"], [5, 3, 1, "", "read_memory"], [5, 3, 1, "", "read_memory_content"], [5, 3, 1, "", "read_memory_label"], [5, 3, 1, "", "read_memory_symbolic"], [5, 3, 1, "", "read_memory_type"], [5, 3, 1, "", "read_register"], [5, 3, 1, "", "read_register_content"], [5, 3, 1, "", "read_register_label"], [5, 3, 1, "", "read_register_symbolic"], [5, 3, 1, "", "read_register_type"], [5, 3, 1, "", "run"], [5, 3, 1, "", "step"], [5, 3, 1, "", "step_block"], [5, 3, 1, "", "step_instruction"], [5, 3, 1, "", "unhook_function"], [5, 3, 1, "", "unhook_instruction"], [5, 3, 1, "", "unhook_instructions"], [5, 3, 1, "", "unhook_interrupt"], [5, 3, 1, "", "unhook_interrupts"], [5, 3, 1, "", "unhook_memory_read"], [5, 3, 1, "", "unhook_memory_reads"], [5, 3, 1, "", "unhook_memory_write"], [5, 3, 1, "", "unhook_memory_writes"], [5, 3, 1, "", "write_code"], [5, 3, 1, "", "write_memory"], [5, 3, 1, "", "write_memory_content"], [5, 3, 1, "", "write_memory_label"], [5, 3, 1, "", "write_memory_type"], [5, 3, 1, "", "write_register"], [5, 3, 1, "", "write_register_content"], [5, 3, 1, "", "write_register_label"], [5, 3, 1, "", "write_register_type"]], "smallworld.exceptions": [[6, 5, 1, "", "AnalysisError"], [6, 5, 1, "", "ConfigurationError"], [6, 5, 1, "", "EmulationBounds"], [6, 5, 1, "", "EmulationError"], [6, 5, 1, "", "EmulationException"], [6, 5, 1, "", "EmulationExitpoint"], [6, 5, 1, "", "EmulationStop"], [6, 5, 1, "", "Error"], [6, 5, 1, "", "SymbolicValueError"], [6, 5, 1, "", "UnsatError"], [6, 5, 1, "", "UnsupportedRegisterError"]], "smallworld.exceptions.AnalysisError": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.ConfigurationError": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.EmulationBounds": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.EmulationError": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.EmulationException": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.EmulationExitpoint": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.EmulationStop": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.Error": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.SymbolicValueError": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.UnsatError": [[6, 3, 1, "", "with_traceback"]], "smallworld.exceptions.UnsupportedRegisterError": [[6, 3, 1, "", "with_traceback"]], "smallworld.extern": [[7, 0, 0, "-", "ctypes"]], "smallworld.extern.ctypes": [[7, 1, 1, "", "TypedPointer"], [7, 4, 1, "", "create_typed_pointer"]], "smallworld.extern.ctypes.TypedPointer": [[7, 3, 1, "", "from_param"], [7, 2, 1, "", "type"], [7, 6, 1, "", "value"]], "smallworld.hinting": [[8, 1, 1, "", "ControlFlowHint"], [8, 1, 1, "", "CoverageHint"], [8, 1, 1, "", "DefUseGraphHint"], [8, 1, 1, "", "DynamicMemoryValueHint"], [8, 1, 1, "", "DynamicMemoryValueSummaryHint"], [8, 1, 1, "", "DynamicRegisterValueHint"], [8, 1, 1, "", "DynamicRegisterValueSummaryHint"], [8, 1, 1, "", "EmulationException"], [8, 1, 1, "", "Hint"], [8, 1, 1, "", "HintSubclassFilter"], [8, 1, 1, "", "MemoryUnavailableHint"], [8, 1, 1, "", "MemoryUnavailableSummaryHint"], [8, 1, 1, "", "ReachableCodeHint"], [8, 1, 1, "", "Serializable"], [8, 4, 1, "", "get_hinter"], [8, 4, 1, "", "setup_hinting"]], "smallworld.hinting.ControlFlowHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.CoverageHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.DefUseGraphHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.DynamicMemoryValueHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.DynamicMemoryValueSummaryHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.DynamicRegisterValueHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.DynamicRegisterValueSummaryHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.EmulationException": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.Hint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.HintSubclassFilter": [[8, 3, 1, "", "filter"]], "smallworld.hinting.MemoryUnavailableHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.MemoryUnavailableSummaryHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.hinting.ReachableCodeHint": [[8, 3, 1, "", "from_dict"], [8, 6, 1, "", "message"], [8, 3, 1, "", "to_dict"]], "smallworld.logging": [[9, 4, 1, "", "setup_logging"]], "smallworld.platforms": [[10, 1, 1, "", "ABI"], [10, 1, 1, "", "Architecture"], [10, 1, 1, "", "Byteorder"], [10, 1, 1, "", "Platform"], [10, 1, 1, "", "RegisterAliasDef"], [10, 1, 1, "", "RegisterDef"]], "smallworld.platforms.ABI": [[10, 6, 1, "", "CDECL"], [10, 6, 1, "", "FASTCALL"], [10, 6, 1, "", "NONE"], [10, 6, 1, "", "SYSTEMV"], [10, 6, 1, "", "VECTORCALL"]], "smallworld.platforms.Architecture": [[10, 6, 1, "", "X86_32"], [10, 6, 1, "", "X86_64"], [10, 6, 1, "", "X86_64_AVX512"]], "smallworld.platforms.Byteorder": [[10, 6, 1, "", "BIG"], [10, 6, 1, "", "LITTLE"], [10, 6, 1, "", "MIDDLE"]], "smallworld.platforms.Platform": [[10, 6, 1, "", "architecture"], [10, 6, 1, "", "byteorder"]], "smallworld.state": [[11, 1, 1, "", "BytesValue"], [11, 1, 1, "", "FixedRegister"], [11, 1, 1, "", "IntegerValue"], [11, 1, 1, "", "Machine"], [11, 1, 1, "", "Register"], [11, 1, 1, "", "RegisterAlias"], [11, 1, 1, "", "Stateful"], [11, 1, 1, "", "SymbolicValue"], [11, 1, 1, "", "Value"], [12, 0, 0, "-", "cpus"], [13, 0, 0, "-", "memory"], [17, 0, 0, "-", "models"]], "smallworld.state.BytesValue": [[11, 3, 1, "", "from_ctypes"], [11, 3, 1, "", "get"], [11, 3, 1, "", "get_content"], [11, 3, 1, "", "get_label"], [11, 3, 1, "", "get_size"], [11, 3, 1, "", "get_type"], [11, 3, 1, "", "set"], [11, 3, 1, "", "set_content"], [11, 3, 1, "", "set_label"], [11, 3, 1, "", "set_type"], [11, 3, 1, "", "to_bytes"], [11, 3, 1, "", "to_symbolic"]], "smallworld.state.FixedRegister": [[11, 3, 1, "", "apply"], [11, 3, 1, "", "extract"], [11, 3, 1, "", "from_ctypes"], [11, 3, 1, "", "get"], [11, 3, 1, "", "get_content"], [11, 3, 1, "", "get_label"], [11, 3, 1, "", "get_size"], [11, 3, 1, "", "get_type"], [11, 6, 1, "", "name"], [11, 3, 1, "", "set"], [11, 3, 1, "", "set_content"], [11, 3, 1, "", "set_label"], [11, 3, 1, "", "set_type"], [11, 6, 1, "", "size"], [11, 3, 1, "", "to_bytes"], [11, 3, 1, "", "to_symbolic"]], "smallworld.state.IntegerValue": [[11, 3, 1, "", "from_ctypes"], [11, 3, 1, "", "get"], [11, 3, 1, "", "get_content"], [11, 3, 1, "", "get_label"], [11, 3, 1, "", "get_size"], [11, 3, 1, "", "get_type"], [11, 3, 1, "", "set"], [11, 3, 1, "", "set_content"], [11, 3, 1, "", "set_label"], [11, 3, 1, "", "set_type"], [11, 3, 1, "", "to_bytes"], [11, 3, 1, "", "to_symbolic"]], "smallworld.state.Machine": [[11, 3, 1, "", "add"], [11, 3, 1, "", "add_bound"], [11, 3, 1, "", "add_constraint"], [11, 3, 1, "", "add_exit_point"], [11, 3, 1, "", "analyze"], [11, 3, 1, "", "apply"], [11, 3, 1, "", "clear"], [11, 3, 1, "", "discard"], [11, 3, 1, "", "emulate"], [11, 3, 1, "", "extract"], [11, 3, 1, "", "fuzz"], [11, 3, 1, "", "fuzz_with_file"], [11, 3, 1, "", "get_bounds"], [11, 3, 1, "", "get_constraints"], [11, 3, 1, "", "get_cpu"], [11, 3, 1, "", "get_cpus"], [11, 3, 1, "", "get_exit_points"], [11, 3, 1, "", "get_platform"], [11, 3, 1, "", "get_platforms"], [11, 3, 1, "", "isdisjoint"], [11, 3, 1, "", "pop"], [11, 3, 1, "", "read_memory"], [11, 3, 1, "", "remove"], [11, 3, 1, "", "step"]], "smallworld.state.Register": [[11, 3, 1, "", "apply"], [11, 3, 1, "", "extract"], [11, 3, 1, "", "from_ctypes"], [11, 3, 1, "", "get"], [11, 3, 1, "", "get_content"], [11, 3, 1, "", "get_label"], [11, 3, 1, "", "get_size"], [11, 3, 1, "", "get_type"], [11, 6, 1, "", "name"], [11, 3, 1, "", "set"], [11, 3, 1, "", "set_content"], [11, 3, 1, "", "set_label"], [11, 3, 1, "", "set_type"], [11, 6, 1, "", "size"], [11, 3, 1, "", "to_bytes"], [11, 3, 1, "", "to_symbolic"]], "smallworld.state.RegisterAlias": [[11, 3, 1, "", "apply"], [11, 3, 1, "", "extract"], [11, 3, 1, "", "from_ctypes"], [11, 3, 1, "", "get"], [11, 3, 1, "", "get_content"], [11, 3, 1, "", "get_label"], [11, 3, 1, "", "get_size"], [11, 3, 1, "", "get_type"], [11, 6, 1, "", "name"], [11, 6, 1, "", "offset"], [11, 6, 1, "", "reference"], [11, 3, 1, "", "set"], [11, 3, 1, "", "set_content"], [11, 3, 1, "", "set_label"], [11, 3, 1, "", "set_type"], [11, 6, 1, "", "size"], [11, 3, 1, "", "to_bytes"], [11, 3, 1, "", "to_symbolic"]], "smallworld.state.Stateful": [[11, 3, 1, "", "apply"], [11, 3, 1, "", "extract"]], "smallworld.state.SymbolicValue": [[11, 3, 1, "", "from_ctypes"], [11, 3, 1, "", "get"], [11, 3, 1, "", "get_content"], [11, 3, 1, "", "get_label"], [11, 3, 1, "", "get_size"], [11, 3, 1, "", "get_type"], [11, 3, 1, "", "set"], [11, 3, 1, "", "set_content"], [11, 3, 1, "", "set_label"], [11, 3, 1, "", "set_type"], [11, 3, 1, "", "to_bytes"], [11, 3, 1, "", "to_symbolic"]], "smallworld.state.Value": [[11, 3, 1, "", "from_ctypes"], [11, 3, 1, "", "get"], [11, 3, 1, "", "get_content"], [11, 3, 1, "", "get_label"], [11, 3, 1, "", "get_size"], [11, 3, 1, "", "get_type"], [11, 3, 1, "", "set"], [11, 3, 1, "", "set_content"], [11, 3, 1, "", "set_label"], [11, 3, 1, "", "set_type"], [11, 3, 1, "", "to_bytes"], [11, 3, 1, "", "to_symbolic"]], "smallworld.state.cpus": [[12, 1, 1, "", "AArch64"], [12, 1, 1, "", "AMD64"], [12, 1, 1, "", "ARMv5T"], [12, 1, 1, "", "ARMv6M"], [12, 1, 1, "", "ARMv6MThumb"], [12, 1, 1, "", "ARMv7A"], [12, 1, 1, "", "ARMv7M"], [12, 1, 1, "", "ARMv7R"], [12, 1, 1, "", "CPU"], [12, 1, 1, "", "I386"], [12, 1, 1, "", "MIPS64BE"], [12, 1, 1, "", "MIPS64EL"], [12, 1, 1, "", "MIPSBE"], [12, 1, 1, "", "MIPSEL"], [12, 1, 1, "", "PowerPC32"], [12, 1, 1, "", "PowerPC64"], [12, 1, 1, "", "RISCV64"], [12, 1, 1, "", "XTensaBE"], [12, 1, 1, "", "XTensaEL"]], "smallworld.state.cpus.AArch64": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.AMD64": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.ARMv5T": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.ARMv6M": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.ARMv6MThumb": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.ARMv7A": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.ARMv7M": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.ARMv7R": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.CPU": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.I386": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.MIPS64BE": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.MIPS64EL": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.MIPSBE": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.MIPSEL": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.PowerPC32": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.PowerPC64": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.RISCV64": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.XTensaBE": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.cpus.XTensaEL": [[12, 3, 1, "", "add"], [12, 3, 1, "", "apply"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "extract"], [12, 3, 1, "", "for_platform"], [12, 3, 1, "", "get_platform"], [12, 3, 1, "", "isdisjoint"], [12, 3, 1, "", "pop"], [12, 3, 1, "", "remove"]], "smallworld.state.memory": [[13, 1, 1, "", "ElfCoreFile"], [13, 1, 1, "", "ElfExecutable"], [13, 1, 1, "", "Memory"], [13, 1, 1, "", "RawMemory"], [14, 0, 0, "-", "code"], [15, 0, 0, "-", "heap"], [16, 0, 0, "-", "stack"]], "smallworld.state.memory.ElfCoreFile": [[13, 6, 1, "", "address"], [13, 3, 1, "", "apply"], [13, 6, 1, "", "entrypoint"], [13, 3, 1, "", "extract"], [13, 3, 1, "", "from_bytes"], [13, 3, 1, "", "from_elf"], [13, 3, 1, "", "from_elf_core"], [13, 3, 1, "", "from_file"], [13, 3, 1, "", "from_filepath"], [13, 3, 1, "", "from_pe"], [13, 3, 1, "", "get_capacity"], [13, 3, 1, "", "get_symbol_size"], [13, 3, 1, "", "get_symbol_value"], [13, 3, 1, "", "get_used"], [13, 3, 1, "", "link_elf"], [13, 6, 1, "", "size"], [13, 3, 1, "", "to_bytes"], [13, 3, 1, "", "update_symbol_value"]], "smallworld.state.memory.ElfExecutable": [[13, 6, 1, "", "address"], [13, 3, 1, "", "apply"], [13, 6, 1, "", "entrypoint"], [13, 3, 1, "", "extract"], [13, 3, 1, "", "from_bytes"], [13, 3, 1, "", "from_elf"], [13, 3, 1, "", "from_elf_core"], [13, 3, 1, "", "from_file"], [13, 3, 1, "", "from_filepath"], [13, 3, 1, "", "from_pe"], [13, 3, 1, "", "get_capacity"], [13, 3, 1, "", "get_symbol_size"], [13, 3, 1, "", "get_symbol_value"], [13, 3, 1, "", "get_used"], [13, 3, 1, "", "link_elf"], [13, 6, 1, "", "size"], [13, 3, 1, "", "to_bytes"], [13, 3, 1, "", "update_symbol_value"]], "smallworld.state.memory.Memory": [[13, 6, 1, "", "address"], [13, 3, 1, "", "apply"], [13, 3, 1, "", "extract"], [13, 3, 1, "", "get_capacity"], [13, 3, 1, "", "get_used"], [13, 6, 1, "", "size"], [13, 3, 1, "", "to_bytes"]], "smallworld.state.memory.RawMemory": [[13, 6, 1, "", "address"], [13, 3, 1, "", "apply"], [13, 3, 1, "", "extract"], [13, 3, 1, "", "from_bytes"], [13, 3, 1, "", "from_file"], [13, 3, 1, "", "from_filepath"], [13, 3, 1, "", "get_capacity"], [13, 3, 1, "", "get_used"], [13, 6, 1, "", "size"], [13, 3, 1, "", "to_bytes"]], "smallworld.state.memory.code": [[14, 1, 1, "", "Executable"]], "smallworld.state.memory.code.Executable": [[14, 6, 1, "", "address"], [14, 3, 1, "", "apply"], [14, 6, 1, "", "entrypoint"], [14, 3, 1, "", "extract"], [14, 3, 1, "", "from_bytes"], [14, 3, 1, "", "from_elf"], [14, 3, 1, "", "from_elf_core"], [14, 3, 1, "", "from_file"], [14, 3, 1, "", "from_filepath"], [14, 3, 1, "", "from_pe"], [14, 3, 1, "", "get_capacity"], [14, 3, 1, "", "get_used"], [14, 6, 1, "", "size"], [14, 3, 1, "", "to_bytes"]], "smallworld.state.memory.heap": [[15, 1, 1, "", "BumpAllocator"], [15, 1, 1, "", "Heap"]], "smallworld.state.memory.heap.BumpAllocator": [[15, 6, 1, "", "address"], [15, 3, 1, "", "allocate"], [15, 3, 1, "", "allocate_bytes"], [15, 3, 1, "", "allocate_ctype"], [15, 3, 1, "", "allocate_integer"], [15, 3, 1, "", "apply"], [15, 3, 1, "", "extract"], [15, 3, 1, "", "free"], [15, 3, 1, "", "get_capacity"], [15, 3, 1, "", "get_used"], [15, 6, 1, "", "size"], [15, 3, 1, "", "to_bytes"]], "smallworld.state.memory.heap.Heap": [[15, 6, 1, "", "address"], [15, 3, 1, "", "allocate"], [15, 3, 1, "", "allocate_bytes"], [15, 3, 1, "", "allocate_ctype"], [15, 3, 1, "", "allocate_integer"], [15, 3, 1, "", "apply"], [15, 3, 1, "", "extract"], [15, 3, 1, "", "free"], [15, 3, 1, "", "get_capacity"], [15, 3, 1, "", "get_used"], [15, 6, 1, "", "size"], [15, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack": [[16, 1, 1, "", "AArch64Stack"], [16, 1, 1, "", "AMD64Stack"], [16, 1, 1, "", "ARMv5tStack"], [16, 1, 1, "", "ARMv6mStack"], [16, 1, 1, "", "ARMv7aStack"], [16, 1, 1, "", "ARMv7mStack"], [16, 1, 1, "", "ARMv7rStack"], [16, 1, 1, "", "MIPS64BEStack"], [16, 1, 1, "", "MIPS64ELStack"], [16, 1, 1, "", "MIPSBEStack"], [16, 1, 1, "", "MIPSELStack"], [16, 1, 1, "", "PowerPC32Stack"], [16, 1, 1, "", "PowerPC64Stack"], [16, 1, 1, "", "RISCV64Stack"], [16, 1, 1, "", "Stack"], [16, 1, 1, "", "X86Stack"], [16, 1, 1, "", "XTensaBEStack"], [16, 1, 1, "", "XTensaELStack"]], "smallworld.state.memory.stack.AArch64Stack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.AMD64Stack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.ARMv5tStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.ARMv6mStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.ARMv7aStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.ARMv7mStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.ARMv7rStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.MIPS64BEStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.MIPS64ELStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.MIPSBEStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.MIPSELStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.PowerPC32Stack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.PowerPC64Stack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.RISCV64Stack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.Stack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 2, 1, "", "platform"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.X86Stack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.XTensaBEStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.memory.stack.XTensaELStack": [[16, 6, 1, "", "address"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "extract"], [16, 3, 1, "", "for_platform"], [16, 3, 1, "", "get_alignment"], [16, 3, 1, "", "get_capacity"], [16, 3, 1, "", "get_platform"], [16, 3, 1, "", "get_pointer"], [16, 3, 1, "", "get_used"], [16, 3, 1, "", "push"], [16, 3, 1, "", "push_bytes"], [16, 3, 1, "", "push_ctype"], [16, 3, 1, "", "push_integer"], [16, 6, 1, "", "size"], [16, 3, 1, "", "to_bytes"]], "smallworld.state.models": [[17, 1, 1, "", "Breakpoint"], [17, 1, 1, "", "Hook"], [17, 1, 1, "", "MemoryMappedModel"], [17, 1, 1, "", "Model"], [17, 1, 1, "", "PDBBreakpoint"], [17, 1, 1, "", "PythonShellBreakpoint"]], "smallworld.state.models.Breakpoint": [[17, 3, 1, "", "apply"], [17, 3, 1, "", "extract"]], "smallworld.state.models.Hook": [[17, 3, 1, "", "apply"], [17, 3, 1, "", "extract"]], "smallworld.state.models.MemoryMappedModel": [[17, 3, 1, "", "apply"], [17, 3, 1, "", "extract"], [17, 3, 1, "", "on_read"], [17, 3, 1, "", "on_write"]], "smallworld.state.models.Model": [[17, 2, 1, "", "abi"], [17, 3, 1, "", "apply"], [17, 3, 1, "", "extract"], [17, 3, 1, "", "lookup"], [17, 3, 1, "", "model"], [17, 2, 1, "", "name"], [17, 2, 1, "", "platform"]], "smallworld.state.models.PDBBreakpoint": [[17, 3, 1, "", "apply"], [17, 3, 1, "", "extract"]], "smallworld.state.models.PythonShellBreakpoint": [[17, 3, 1, "", "apply"], [17, 3, 1, "", "extract"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": 0, "disclaim": 0, "licens": 0, "smallworld": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 28, 32], "document": 1, "content": 1, "refer": 2, "analys": [4, 18, 29], "emul": [5, 30, 33], "except": 6, "extern": 7, "ctype": 7, "hint": [8, 31], "log": 9, "platform": [10, 33], "state": [11, 12, 13, 14, 15, 16, 17, 34], "cpu": 12, "memori": [13, 14, 15, 16, 23], "code": 14, "heap": [15, 22], "stack": 16, "model": [17, 24], "fuzz": 19, "har": 20, "simpl": 20, "program": 20, "get": 21, "start": 21, "local": 22, "type": 22, "map": 23, "hook": 24, "next": 25, "step": 25, "put": 26, "all": 26, "togeth": 26, "quick": 27, "instal": 27, "guid": 27, "prerequisit": 27, "glanc": 28, "us": 32, "support": 33, "basic": 33, "isa": 33, "specif": 33, "note": 33, "float": 33, "point": 33, "vector": 33}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"About": [[0, "about"]], "Disclaimer": [[0, "disclaimer"]], "License": [[0, "license"]], "SmallWorld Documentation": [[1, "smallworld-documentation"]], "Contents:": [[1, null]], "Reference": [[2, "reference"]], "smallworld": [[3, "module-smallworld"]], "smallworld.analyses": [[4, "module-smallworld.analyses"]], "smallworld.emulators": [[5, "module-smallworld.emulators"]], "smallworld.exceptions": [[6, "module-smallworld.exceptions"]], "smallworld.extern.ctypes": [[7, "module-smallworld.extern.ctypes"]], "smallworld.hinting": [[8, "module-smallworld.hinting"]], "smallworld.logging": [[9, "module-smallworld.logging"]], "smallworld.platforms": [[10, "module-smallworld.platforms"]], "smallworld.state": [[11, "module-smallworld.state"]], "smallworld.state.cpus": [[12, "module-smallworld.state.cpus"]], "smallworld.state.memory": [[13, "module-smallworld.state.memory"]], "smallworld.state.memory.code": [[14, "module-smallworld.state.memory.code"]], "smallworld.state.memory.heap": [[15, "module-smallworld.state.memory.heap"]], "smallworld.state.memory.stack": [[16, "module-smallworld.state.memory.stack"]], "smallworld.state.models": [[17, "module-smallworld.state.models"]], "Analyses": [[18, "analyses"], [29, "analyses"]], "Fuzzing": [[19, "fuzzing"]], "Harnessing a Simple Program": [[20, "harnessing-a-simple-program"]], "Getting Started": [[21, "getting-started"]], "Local Types and the Heap": [[22, "local-types-and-the-heap"]], "Mapping Memory": [[23, "mapping-memory"]], "Modeling and Hooking": [[24, "modeling-and-hooking"]], "Next Steps": [[25, "next-steps"]], "Putting it all Together": [[26, "putting-it-all-together"]], "Quick Install Guide": [[27, "quick-install-guide"]], "Prerequisites": [[27, "prerequisites"]], "Installation": [[27, "installation"]], "SmallWorld at a Glance": [[28, "smallworld-at-a-glance"]], "Emulators": [[30, "emulators"]], "Hinting": [[31, "hinting"]], "Using SmallWorld": [[32, "using-smallworld"]], "Supported Platforms": [[33, "supported-platforms"]], "Basic ISA Support": [[33, "id1"], [33, "id2"]], "Specific Emulator Notes": [[33, "specific-emulator-notes"]], "Specific ISA Notes": [[33, "specific-isa-notes"]], "Floating Point and Vector Support": [[33, "floating-point-and-vector-support"]], "State": [[34, "state"]]}, "indexentries": {"analyze() (in module smallworld)": [[3, "smallworld.analyze"]], "module": [[3, "module-smallworld"], [4, "module-smallworld.analyses"], [5, "module-smallworld.emulators"], [6, "module-smallworld.exceptions"], [7, "module-smallworld.extern.ctypes"], [8, "module-smallworld.hinting"], [9, "module-smallworld.logging"], [10, "module-smallworld.platforms"], [11, "module-smallworld.state"], [12, "module-smallworld.state.cpus"], [13, "module-smallworld.state.memory"], [14, "module-smallworld.state.memory.code"], [15, "module-smallworld.state.memory.heap"], [16, "module-smallworld.state.memory.stack"], [17, "module-smallworld.state.models"]], "smallworld": [[3, "module-smallworld"]], "analysis (class in smallworld.analyses)": [[4, "smallworld.analyses.Analysis"]], "colorizer (class in smallworld.analyses)": [[4, "smallworld.analyses.Colorizer"]], "colorizerdefuse (class in smallworld.analyses)": [[4, "smallworld.analyses.ColorizerDefUse"]], "colorizersummary (class in smallworld.analyses)": [[4, "smallworld.analyses.ColorizerSummary"]], "fielddetectionanalysis (class in smallworld.analyses)": [[4, "smallworld.analyses.FieldDetectionAnalysis"]], "filter (class in smallworld.analyses)": [[4, "smallworld.analyses.Filter"]], "forcedexecution (class in smallworld.analyses)": [[4, "smallworld.analyses.ForcedExecution"]], "forcedfielddetectionanalysis (class in smallworld.analyses)": [[4, "smallworld.analyses.ForcedFieldDetectionAnalysis"]], "activate() (smallworld.analyses.colorizerdefuse method)": [[4, "smallworld.analyses.ColorizerDefUse.activate"]], "activate() (smallworld.analyses.colorizersummary method)": [[4, "smallworld.analyses.ColorizerSummary.activate"]], "activate() (smallworld.analyses.filter method)": [[4, "smallworld.analyses.Filter.activate"]], "deactivate() (smallworld.analyses.colorizerdefuse method)": [[4, "smallworld.analyses.ColorizerDefUse.deactivate"]], "deactivate() (smallworld.analyses.colorizersummary method)": [[4, "smallworld.analyses.ColorizerSummary.deactivate"]], "deactivate() (smallworld.analyses.filter method)": [[4, "smallworld.analyses.Filter.deactivate"]], "description (smallworld.analyses.analysis property)": [[4, "smallworld.analyses.Analysis.description"]], "description (smallworld.analyses.filter property)": [[4, "smallworld.analyses.Filter.description"]], "emulator (smallworld.analyses.fielddetectionanalysis property)": [[4, "smallworld.analyses.FieldDetectionAnalysis.emulator"]], "emulator (smallworld.analyses.forcedexecution property)": [[4, "smallworld.analyses.ForcedExecution.emulator"]], "emulator (smallworld.analyses.forcedfielddetectionanalysis property)": [[4, "smallworld.analyses.ForcedFieldDetectionAnalysis.emulator"]], "execute() (smallworld.analyses.fielddetectionanalysis method)": [[4, "smallworld.analyses.FieldDetectionAnalysis.execute"]], "execute() (smallworld.analyses.forcedexecution method)": [[4, "smallworld.analyses.ForcedExecution.execute"]], "execute() (smallworld.analyses.forcedfielddetectionanalysis method)": [[4, "smallworld.analyses.ForcedFieldDetectionAnalysis.execute"]], "listen() (smallworld.analyses.colorizerdefuse method)": [[4, "smallworld.analyses.ColorizerDefUse.listen"]], "listen() (smallworld.analyses.colorizersummary method)": [[4, "smallworld.analyses.ColorizerSummary.listen"]], "listen() (smallworld.analyses.filter method)": [[4, "smallworld.analyses.Filter.listen"]], "name (smallworld.analyses.analysis property)": [[4, "smallworld.analyses.Analysis.name"]], "name (smallworld.analyses.filter property)": [[4, "smallworld.analyses.Filter.name"]], "run() (smallworld.analyses.analysis method)": [[4, "smallworld.analyses.Analysis.run"]], "run() (smallworld.analyses.colorizer method)": [[4, "smallworld.analyses.Colorizer.run"]], "run() (smallworld.analyses.fielddetectionanalysis method)": [[4, "smallworld.analyses.FieldDetectionAnalysis.run"]], "run() (smallworld.analyses.forcedexecution method)": [[4, "smallworld.analyses.ForcedExecution.run"]], "run() (smallworld.analyses.forcedfielddetectionanalysis method)": [[4, "smallworld.analyses.ForcedFieldDetectionAnalysis.run"]], "smallworld.analyses": [[4, "module-smallworld.analyses"]], "version (smallworld.analyses.analysis property)": [[4, "smallworld.analyses.Analysis.version"]], "version (smallworld.analyses.filter property)": [[4, "smallworld.analyses.Filter.version"]], "angremulator (class in smallworld.emulators)": [[5, "smallworld.emulators.AngrEmulator"]], "constrainedemulator (class in smallworld.emulators)": [[5, "smallworld.emulators.ConstrainedEmulator"]], "emulator (class in smallworld.emulators)": [[5, "smallworld.emulators.Emulator"]], "functionhookable (class in smallworld.emulators)": [[5, "smallworld.emulators.FunctionHookable"]], "ghidraemulator() (in module smallworld.emulators)": [[5, "smallworld.emulators.GhidraEmulator"]], "instructionhookable (class in smallworld.emulators)": [[5, "smallworld.emulators.InstructionHookable"]], "interrupthookable (class in smallworld.emulators)": [[5, "smallworld.emulators.InterruptHookable"]], "memoryreadhookable (class in smallworld.emulators)": [[5, "smallworld.emulators.MemoryReadHookable"]], "memorywritehookable (class in smallworld.emulators)": [[5, "smallworld.emulators.MemoryWriteHookable"]], "pathterminationsignal": [[5, "smallworld.emulators.PathTerminationSignal"]], "unicornemulationerror": [[5, "smallworld.emulators.UnicornEmulationError"]], "unicornemulationexecutionerror": [[5, "smallworld.emulators.UnicornEmulationExecutionError"]], "unicornemulationmemoryreaderror": [[5, "smallworld.emulators.UnicornEmulationMemoryReadError"]], "unicornemulationmemorywriteerror": [[5, "smallworld.emulators.UnicornEmulationMemoryWriteError"]], "unicornemulator (class in smallworld.emulators)": [[5, "smallworld.emulators.UnicornEmulator"]], "add_bound() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.add_bound"]], "add_bound() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.add_bound"]], "add_bound() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.add_bound"]], "add_constraint() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.add_constraint"]], "add_constraint() (smallworld.emulators.constrainedemulator method)": [[5, "smallworld.emulators.ConstrainedEmulator.add_constraint"]], "add_exit_point() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.add_exit_point"]], "add_exit_point() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.add_exit_point"]], "add_exit_point() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.add_exit_point"]], "add_extension() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.add_extension"]], "byteorder (smallworld.emulators.angremulator property)": [[5, "smallworld.emulators.AngrEmulator.byteorder"]], "description (smallworld.emulators.emulator property)": [[5, "smallworld.emulators.Emulator.description"]], "enable_linear() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.enable_linear"]], "eval_atleast() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.eval_atleast"]], "eval_atleast() (smallworld.emulators.constrainedemulator method)": [[5, "smallworld.emulators.ConstrainedEmulator.eval_atleast"]], "eval_atmost() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.eval_atmost"]], "eval_atmost() (smallworld.emulators.constrainedemulator method)": [[5, "smallworld.emulators.ConstrainedEmulator.eval_atmost"]], "get_bounds() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.get_bounds"]], "get_bounds() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.get_bounds"]], "get_bounds() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.get_bounds"]], "get_constraints() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.get_constraints"]], "get_constraints() (smallworld.emulators.constrainedemulator method)": [[5, "smallworld.emulators.ConstrainedEmulator.get_constraints"]], "get_exit_points() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.get_exit_points"]], "get_exit_points() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.get_exit_points"]], "get_exit_points() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.get_exit_points"]], "get_extension() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.get_extension"]], "get_memory_map() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.get_memory_map"]], "get_memory_map() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.get_memory_map"]], "get_memory_map() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.get_memory_map"]], "hook_function() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_function"]], "hook_function() (smallworld.emulators.functionhookable method)": [[5, "smallworld.emulators.FunctionHookable.hook_function"]], "hook_function() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_function"]], "hook_instruction() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_instruction"]], "hook_instruction() (smallworld.emulators.instructionhookable method)": [[5, "smallworld.emulators.InstructionHookable.hook_instruction"]], "hook_instruction() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_instruction"]], "hook_interrupt() (smallworld.emulators.interrupthookable method)": [[5, "smallworld.emulators.InterruptHookable.hook_interrupt"]], "hook_interrupt() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_interrupt"]], "hook_interrupts() (smallworld.emulators.interrupthookable method)": [[5, "smallworld.emulators.InterruptHookable.hook_interrupts"]], "hook_interrupts() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_interrupts"]], "hook_memory_read() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_memory_read"]], "hook_memory_read() (smallworld.emulators.memoryreadhookable method)": [[5, "smallworld.emulators.MemoryReadHookable.hook_memory_read"]], "hook_memory_read() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_memory_read"]], "hook_memory_read_symbolic() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_memory_read_symbolic"]], "hook_memory_read_symbolic() (smallworld.emulators.memoryreadhookable method)": [[5, "smallworld.emulators.MemoryReadHookable.hook_memory_read_symbolic"]], "hook_memory_read_symbolic() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_memory_read_symbolic"]], "hook_memory_reads() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_memory_reads"]], "hook_memory_reads() (smallworld.emulators.memoryreadhookable method)": [[5, "smallworld.emulators.MemoryReadHookable.hook_memory_reads"]], "hook_memory_reads() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_memory_reads"]], "hook_memory_reads_symbolic() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_memory_reads_symbolic"]], "hook_memory_reads_symbolic() (smallworld.emulators.memoryreadhookable method)": [[5, "smallworld.emulators.MemoryReadHookable.hook_memory_reads_symbolic"]], "hook_memory_reads_symbolic() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_memory_reads_symbolic"]], "hook_memory_write() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_memory_write"]], "hook_memory_write() (smallworld.emulators.memorywritehookable method)": [[5, "smallworld.emulators.MemoryWriteHookable.hook_memory_write"]], "hook_memory_write() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_memory_write"]], "hook_memory_write_symbolic() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_memory_write_symbolic"]], "hook_memory_write_symbolic() (smallworld.emulators.memorywritehookable method)": [[5, "smallworld.emulators.MemoryWriteHookable.hook_memory_write_symbolic"]], "hook_memory_write_symbolic() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_memory_write_symbolic"]], "hook_memory_writes() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_memory_writes"]], "hook_memory_writes() (smallworld.emulators.memorywritehookable method)": [[5, "smallworld.emulators.MemoryWriteHookable.hook_memory_writes"]], "hook_memory_writes() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_memory_writes"]], "hook_memory_writes_symbolic() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_memory_writes_symbolic"]], "hook_memory_writes_symbolic() (smallworld.emulators.memorywritehookable method)": [[5, "smallworld.emulators.MemoryWriteHookable.hook_memory_writes_symbolic"]], "hook_memory_writes_symbolic() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.hook_memory_writes_symbolic"]], "hook_syscall() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_syscall"]], "hook_syscalls() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.hook_syscalls"]], "initialize() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.initialize"]], "map_memory() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.map_memory"]], "map_memory() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.map_memory"]], "map_memory() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.map_memory"]], "name (smallworld.emulators.emulator property)": [[5, "smallworld.emulators.Emulator.name"]], "read_memory() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_memory"]], "read_memory() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_memory"]], "read_memory() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_memory"]], "read_memory_content() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_memory_content"]], "read_memory_content() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_memory_content"]], "read_memory_content() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_memory_content"]], "read_memory_label() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_memory_label"]], "read_memory_label() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_memory_label"]], "read_memory_label() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_memory_label"]], "read_memory_symbolic() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_memory_symbolic"]], "read_memory_symbolic() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_memory_symbolic"]], "read_memory_symbolic() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_memory_symbolic"]], "read_memory_type() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_memory_type"]], "read_memory_type() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_memory_type"]], "read_memory_type() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_memory_type"]], "read_register() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_register"]], "read_register() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_register"]], "read_register() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_register"]], "read_register_content() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_register_content"]], "read_register_content() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_register_content"]], "read_register_content() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_register_content"]], "read_register_label() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_register_label"]], "read_register_label() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_register_label"]], "read_register_label() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_register_label"]], "read_register_symbolic() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_register_symbolic"]], "read_register_symbolic() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_register_symbolic"]], "read_register_symbolic() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_register_symbolic"]], "read_register_type() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.read_register_type"]], "read_register_type() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.read_register_type"]], "read_register_type() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.read_register_type"]], "run() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.run"]], "run() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.run"]], "run() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.run"]], "satisfiable() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.satisfiable"]], "satisfiable() (smallworld.emulators.constrainedemulator method)": [[5, "smallworld.emulators.ConstrainedEmulator.satisfiable"]], "smallworld.emulators": [[5, "module-smallworld.emulators"]], "step() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.step"]], "step() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.step"]], "step() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.step"]], "step_block() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.step_block"]], "step_block() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.step_block"]], "step_block() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.step_block"]], "step_instruction() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.step_instruction"]], "step_instruction() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.step_instruction"]], "step_instruction() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.step_instruction"]], "unhook_function() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.unhook_function"]], "unhook_function() (smallworld.emulators.functionhookable method)": [[5, "smallworld.emulators.FunctionHookable.unhook_function"]], "unhook_function() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.unhook_function"]], "unhook_instruction() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.unhook_instruction"]], "unhook_instruction() (smallworld.emulators.instructionhookable method)": [[5, "smallworld.emulators.InstructionHookable.unhook_instruction"]], "unhook_instruction() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.unhook_instruction"]], "unhook_instructions() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.unhook_instructions"]], "unhook_instructions() (smallworld.emulators.instructionhookable method)": [[5, "smallworld.emulators.InstructionHookable.unhook_instructions"]], "unhook_instructions() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.unhook_instructions"]], "unhook_interrupt() (smallworld.emulators.interrupthookable method)": [[5, "smallworld.emulators.InterruptHookable.unhook_interrupt"]], "unhook_interrupt() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.unhook_interrupt"]], "unhook_interrupts() (smallworld.emulators.interrupthookable method)": [[5, "smallworld.emulators.InterruptHookable.unhook_interrupts"]], "unhook_interrupts() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.unhook_interrupts"]], "unhook_memory_read() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.unhook_memory_read"]], "unhook_memory_read() (smallworld.emulators.memoryreadhookable method)": [[5, "smallworld.emulators.MemoryReadHookable.unhook_memory_read"]], "unhook_memory_read() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.unhook_memory_read"]], "unhook_memory_reads() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.unhook_memory_reads"]], "unhook_memory_reads() (smallworld.emulators.memoryreadhookable method)": [[5, "smallworld.emulators.MemoryReadHookable.unhook_memory_reads"]], "unhook_memory_reads() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.unhook_memory_reads"]], "unhook_memory_write() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.unhook_memory_write"]], "unhook_memory_write() (smallworld.emulators.memorywritehookable method)": [[5, "smallworld.emulators.MemoryWriteHookable.unhook_memory_write"]], "unhook_memory_write() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.unhook_memory_write"]], "unhook_memory_writes() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.unhook_memory_writes"]], "unhook_memory_writes() (smallworld.emulators.memorywritehookable method)": [[5, "smallworld.emulators.MemoryWriteHookable.unhook_memory_writes"]], "unhook_memory_writes() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.unhook_memory_writes"]], "unhook_syscall() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.unhook_syscall"]], "unhook_syscalls() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.unhook_syscalls"]], "version (smallworld.emulators.emulator property)": [[5, "smallworld.emulators.Emulator.version"]], "visit_states() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.visit_states"]], "with_traceback() (smallworld.emulators.pathterminationsignal method)": [[5, "smallworld.emulators.PathTerminationSignal.with_traceback"]], "with_traceback() (smallworld.emulators.unicornemulationerror method)": [[5, "smallworld.emulators.UnicornEmulationError.with_traceback"]], "with_traceback() (smallworld.emulators.unicornemulationexecutionerror method)": [[5, "smallworld.emulators.UnicornEmulationExecutionError.with_traceback"]], "with_traceback() (smallworld.emulators.unicornemulationmemoryreaderror method)": [[5, "smallworld.emulators.UnicornEmulationMemoryReadError.with_traceback"]], "with_traceback() (smallworld.emulators.unicornemulationmemorywriteerror method)": [[5, "smallworld.emulators.UnicornEmulationMemoryWriteError.with_traceback"]], "write_code() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.write_code"]], "write_code() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.write_code"]], "write_code() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.write_code"]], "write_memory() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.write_memory"]], "write_memory() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.write_memory"]], "write_memory() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.write_memory"]], "write_memory_content() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.write_memory_content"]], "write_memory_content() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.write_memory_content"]], "write_memory_content() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.write_memory_content"]], "write_memory_label() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.write_memory_label"]], "write_memory_label() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.write_memory_label"]], "write_memory_label() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.write_memory_label"]], "write_memory_type() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.write_memory_type"]], "write_memory_type() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.write_memory_type"]], "write_memory_type() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.write_memory_type"]], "write_register() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.write_register"]], "write_register() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.write_register"]], "write_register() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.write_register"]], "write_register_content() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.write_register_content"]], "write_register_content() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.write_register_content"]], "write_register_content() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.write_register_content"]], "write_register_label() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.write_register_label"]], "write_register_label() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.write_register_label"]], "write_register_label() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.write_register_label"]], "write_register_type() (smallworld.emulators.angremulator method)": [[5, "smallworld.emulators.AngrEmulator.write_register_type"]], "write_register_type() (smallworld.emulators.emulator method)": [[5, "smallworld.emulators.Emulator.write_register_type"]], "write_register_type() (smallworld.emulators.unicornemulator method)": [[5, "smallworld.emulators.UnicornEmulator.write_register_type"]], "analysiserror": [[6, "smallworld.exceptions.AnalysisError"]], "configurationerror": [[6, "smallworld.exceptions.ConfigurationError"]], "emulationbounds": [[6, "smallworld.exceptions.EmulationBounds"]], "emulationerror": [[6, "smallworld.exceptions.EmulationError"]], "emulationexception": [[6, "smallworld.exceptions.EmulationException"]], "emulationexitpoint": [[6, "smallworld.exceptions.EmulationExitpoint"]], "emulationstop": [[6, "smallworld.exceptions.EmulationStop"]], "error": [[6, "smallworld.exceptions.Error"]], "symbolicvalueerror": [[6, "smallworld.exceptions.SymbolicValueError"]], "unsaterror": [[6, "smallworld.exceptions.UnsatError"]], "unsupportedregistererror": [[6, "smallworld.exceptions.UnsupportedRegisterError"]], "smallworld.exceptions": [[6, "module-smallworld.exceptions"]], "with_traceback() (smallworld.exceptions.analysiserror method)": [[6, "smallworld.exceptions.AnalysisError.with_traceback"]], "with_traceback() (smallworld.exceptions.configurationerror method)": [[6, "smallworld.exceptions.ConfigurationError.with_traceback"]], "with_traceback() (smallworld.exceptions.emulationbounds method)": [[6, "smallworld.exceptions.EmulationBounds.with_traceback"]], "with_traceback() (smallworld.exceptions.emulationerror method)": [[6, "smallworld.exceptions.EmulationError.with_traceback"]], "with_traceback() (smallworld.exceptions.emulationexception method)": [[6, "smallworld.exceptions.EmulationException.with_traceback"]], "with_traceback() (smallworld.exceptions.emulationexitpoint method)": [[6, "smallworld.exceptions.EmulationExitpoint.with_traceback"]], "with_traceback() (smallworld.exceptions.emulationstop method)": [[6, "smallworld.exceptions.EmulationStop.with_traceback"]], "with_traceback() (smallworld.exceptions.error method)": [[6, "smallworld.exceptions.Error.with_traceback"]], "with_traceback() (smallworld.exceptions.symbolicvalueerror method)": [[6, "smallworld.exceptions.SymbolicValueError.with_traceback"]], "with_traceback() (smallworld.exceptions.unsaterror method)": [[6, "smallworld.exceptions.UnsatError.with_traceback"]], "with_traceback() (smallworld.exceptions.unsupportedregistererror method)": [[6, "smallworld.exceptions.UnsupportedRegisterError.with_traceback"]], "typedpointer (class in smallworld.extern.ctypes)": [[7, "smallworld.extern.ctypes.TypedPointer"]], "create_typed_pointer() (in module smallworld.extern.ctypes)": [[7, "smallworld.extern.ctypes.create_typed_pointer"]], "from_param() (smallworld.extern.ctypes.typedpointer method)": [[7, "smallworld.extern.ctypes.TypedPointer.from_param"]], "smallworld.extern.ctypes": [[7, "module-smallworld.extern.ctypes"]], "type (smallworld.extern.ctypes.typedpointer property)": [[7, "smallworld.extern.ctypes.TypedPointer.type"]], "value (smallworld.extern.ctypes.typedpointer attribute)": [[7, "smallworld.extern.ctypes.TypedPointer.value"]], "controlflowhint (class in smallworld.hinting)": [[8, "smallworld.hinting.ControlFlowHint"]], "coveragehint (class in smallworld.hinting)": [[8, "smallworld.hinting.CoverageHint"]], "defusegraphhint (class in smallworld.hinting)": [[8, "smallworld.hinting.DefUseGraphHint"]], "dynamicmemoryvaluehint (class in smallworld.hinting)": [[8, "smallworld.hinting.DynamicMemoryValueHint"]], "dynamicmemoryvaluesummaryhint (class in smallworld.hinting)": [[8, "smallworld.hinting.DynamicMemoryValueSummaryHint"]], "dynamicregistervaluehint (class in smallworld.hinting)": [[8, "smallworld.hinting.DynamicRegisterValueHint"]], "dynamicregistervaluesummaryhint (class in smallworld.hinting)": [[8, "smallworld.hinting.DynamicRegisterValueSummaryHint"]], "emulationexception (class in smallworld.hinting)": [[8, "smallworld.hinting.EmulationException"]], "hint (class in smallworld.hinting)": [[8, "smallworld.hinting.Hint"]], "hintsubclassfilter (class in smallworld.hinting)": [[8, "smallworld.hinting.HintSubclassFilter"]], "memoryunavailablehint (class in smallworld.hinting)": [[8, "smallworld.hinting.MemoryUnavailableHint"]], "memoryunavailablesummaryhint (class in smallworld.hinting)": [[8, "smallworld.hinting.MemoryUnavailableSummaryHint"]], "reachablecodehint (class in smallworld.hinting)": [[8, "smallworld.hinting.ReachableCodeHint"]], "serializable (class in smallworld.hinting)": [[8, "smallworld.hinting.Serializable"]], "filter() (smallworld.hinting.hintsubclassfilter method)": [[8, "smallworld.hinting.HintSubclassFilter.filter"]], "from_dict() (smallworld.hinting.controlflowhint class method)": [[8, "smallworld.hinting.ControlFlowHint.from_dict"]], "from_dict() (smallworld.hinting.coveragehint class method)": [[8, "smallworld.hinting.CoverageHint.from_dict"]], "from_dict() (smallworld.hinting.defusegraphhint class method)": [[8, "smallworld.hinting.DefUseGraphHint.from_dict"]], "from_dict() (smallworld.hinting.dynamicmemoryvaluehint class method)": [[8, "smallworld.hinting.DynamicMemoryValueHint.from_dict"]], "from_dict() (smallworld.hinting.dynamicmemoryvaluesummaryhint class method)": [[8, "smallworld.hinting.DynamicMemoryValueSummaryHint.from_dict"]], "from_dict() (smallworld.hinting.dynamicregistervaluehint class method)": [[8, "smallworld.hinting.DynamicRegisterValueHint.from_dict"]], "from_dict() (smallworld.hinting.dynamicregistervaluesummaryhint class method)": [[8, "smallworld.hinting.DynamicRegisterValueSummaryHint.from_dict"]], "from_dict() (smallworld.hinting.emulationexception class method)": [[8, "smallworld.hinting.EmulationException.from_dict"]], "from_dict() (smallworld.hinting.hint class method)": [[8, "smallworld.hinting.Hint.from_dict"]], "from_dict() (smallworld.hinting.memoryunavailablehint class method)": [[8, "smallworld.hinting.MemoryUnavailableHint.from_dict"]], "from_dict() (smallworld.hinting.memoryunavailablesummaryhint class method)": [[8, "smallworld.hinting.MemoryUnavailableSummaryHint.from_dict"]], "from_dict() (smallworld.hinting.reachablecodehint class method)": [[8, "smallworld.hinting.ReachableCodeHint.from_dict"]], "get_hinter() (in module smallworld.hinting)": [[8, "smallworld.hinting.get_hinter"]], "message (smallworld.hinting.controlflowhint attribute)": [[8, "smallworld.hinting.ControlFlowHint.message"]], "message (smallworld.hinting.coveragehint attribute)": [[8, "smallworld.hinting.CoverageHint.message"]], "message (smallworld.hinting.defusegraphhint attribute)": [[8, "smallworld.hinting.DefUseGraphHint.message"]], "message (smallworld.hinting.dynamicmemoryvaluehint attribute)": [[8, "smallworld.hinting.DynamicMemoryValueHint.message"]], "message (smallworld.hinting.dynamicmemoryvaluesummaryhint attribute)": [[8, "smallworld.hinting.DynamicMemoryValueSummaryHint.message"]], "message (smallworld.hinting.dynamicregistervaluehint attribute)": [[8, "smallworld.hinting.DynamicRegisterValueHint.message"]], "message (smallworld.hinting.dynamicregistervaluesummaryhint attribute)": [[8, "smallworld.hinting.DynamicRegisterValueSummaryHint.message"]], "message (smallworld.hinting.emulationexception attribute)": [[8, "smallworld.hinting.EmulationException.message"]], "message (smallworld.hinting.hint attribute)": [[8, "smallworld.hinting.Hint.message"]], "message (smallworld.hinting.memoryunavailablehint attribute)": [[8, "smallworld.hinting.MemoryUnavailableHint.message"]], "message (smallworld.hinting.memoryunavailablesummaryhint attribute)": [[8, "smallworld.hinting.MemoryUnavailableSummaryHint.message"]], "message (smallworld.hinting.reachablecodehint attribute)": [[8, "smallworld.hinting.ReachableCodeHint.message"]], "setup_hinting() (in module smallworld.hinting)": [[8, "smallworld.hinting.setup_hinting"]], "smallworld.hinting": [[8, "module-smallworld.hinting"]], "to_dict() (smallworld.hinting.controlflowhint method)": [[8, "smallworld.hinting.ControlFlowHint.to_dict"]], "to_dict() (smallworld.hinting.coveragehint method)": [[8, "smallworld.hinting.CoverageHint.to_dict"]], "to_dict() (smallworld.hinting.defusegraphhint method)": [[8, "smallworld.hinting.DefUseGraphHint.to_dict"]], "to_dict() (smallworld.hinting.dynamicmemoryvaluehint method)": [[8, "smallworld.hinting.DynamicMemoryValueHint.to_dict"]], "to_dict() (smallworld.hinting.dynamicmemoryvaluesummaryhint method)": [[8, "smallworld.hinting.DynamicMemoryValueSummaryHint.to_dict"]], "to_dict() (smallworld.hinting.dynamicregistervaluehint method)": [[8, "smallworld.hinting.DynamicRegisterValueHint.to_dict"]], "to_dict() (smallworld.hinting.dynamicregistervaluesummaryhint method)": [[8, "smallworld.hinting.DynamicRegisterValueSummaryHint.to_dict"]], "to_dict() (smallworld.hinting.emulationexception method)": [[8, "smallworld.hinting.EmulationException.to_dict"]], "to_dict() (smallworld.hinting.hint method)": [[8, "smallworld.hinting.Hint.to_dict"]], "to_dict() (smallworld.hinting.memoryunavailablehint method)": [[8, "smallworld.hinting.MemoryUnavailableHint.to_dict"]], "to_dict() (smallworld.hinting.memoryunavailablesummaryhint method)": [[8, "smallworld.hinting.MemoryUnavailableSummaryHint.to_dict"]], "to_dict() (smallworld.hinting.reachablecodehint method)": [[8, "smallworld.hinting.ReachableCodeHint.to_dict"]], "setup_logging() (in module smallworld.logging)": [[9, "smallworld.logging.setup_logging"]], "smallworld.logging": [[9, "module-smallworld.logging"]], "abi (class in smallworld.platforms)": [[10, "smallworld.platforms.ABI"]], "architecture (class in smallworld.platforms)": [[10, "smallworld.platforms.Architecture"]], "big (smallworld.platforms.byteorder attribute)": [[10, "smallworld.platforms.Byteorder.BIG"]], "byteorder (class in smallworld.platforms)": [[10, "smallworld.platforms.Byteorder"]], "cdecl (smallworld.platforms.abi attribute)": [[10, "smallworld.platforms.ABI.CDECL"]], "fastcall (smallworld.platforms.abi attribute)": [[10, "smallworld.platforms.ABI.FASTCALL"]], "little (smallworld.platforms.byteorder attribute)": [[10, "smallworld.platforms.Byteorder.LITTLE"]], "middle (smallworld.platforms.byteorder attribute)": [[10, "smallworld.platforms.Byteorder.MIDDLE"]], "none (smallworld.platforms.abi attribute)": [[10, "smallworld.platforms.ABI.NONE"]], "platform (class in smallworld.platforms)": [[10, "smallworld.platforms.Platform"]], "registeraliasdef (class in smallworld.platforms)": [[10, "smallworld.platforms.RegisterAliasDef"]], "registerdef (class in smallworld.platforms)": [[10, "smallworld.platforms.RegisterDef"]], "systemv (smallworld.platforms.abi attribute)": [[10, "smallworld.platforms.ABI.SYSTEMV"]], "vectorcall (smallworld.platforms.abi attribute)": [[10, "smallworld.platforms.ABI.VECTORCALL"]], "x86_32 (smallworld.platforms.architecture attribute)": [[10, "smallworld.platforms.Architecture.X86_32"]], "x86_64 (smallworld.platforms.architecture attribute)": [[10, "smallworld.platforms.Architecture.X86_64"]], "x86_64_avx512 (smallworld.platforms.architecture attribute)": [[10, "smallworld.platforms.Architecture.X86_64_AVX512"]], "architecture (smallworld.platforms.platform attribute)": [[10, "smallworld.platforms.Platform.architecture"]], "byteorder (smallworld.platforms.platform attribute)": [[10, "smallworld.platforms.Platform.byteorder"]], "smallworld.platforms": [[10, "module-smallworld.platforms"]], "bytesvalue (class in smallworld.state)": [[11, "smallworld.state.BytesValue"]], "fixedregister (class in smallworld.state)": [[11, "smallworld.state.FixedRegister"]], "integervalue (class in smallworld.state)": [[11, "smallworld.state.IntegerValue"]], "machine (class in smallworld.state)": [[11, "smallworld.state.Machine"]], "register (class in smallworld.state)": [[11, "smallworld.state.Register"]], "registeralias (class in smallworld.state)": [[11, "smallworld.state.RegisterAlias"]], "stateful (class in smallworld.state)": [[11, "smallworld.state.Stateful"]], "symbolicvalue (class in smallworld.state)": [[11, "smallworld.state.SymbolicValue"]], "value (class in smallworld.state)": [[11, "smallworld.state.Value"]], "add() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.add"]], "add_bound() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.add_bound"]], "add_constraint() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.add_constraint"]], "add_exit_point() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.add_exit_point"]], "analyze() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.analyze"]], "apply() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.apply"]], "apply() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.apply"]], "apply() (smallworld.state.register method)": [[11, "smallworld.state.Register.apply"]], "apply() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.apply"]], "apply() (smallworld.state.stateful method)": [[11, "smallworld.state.Stateful.apply"]], "clear() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.clear"]], "discard() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.discard"]], "emulate() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.emulate"]], "extract() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.extract"]], "extract() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.extract"]], "extract() (smallworld.state.register method)": [[11, "smallworld.state.Register.extract"]], "extract() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.extract"]], "extract() (smallworld.state.stateful method)": [[11, "smallworld.state.Stateful.extract"]], "from_ctypes() (smallworld.state.bytesvalue class method)": [[11, "smallworld.state.BytesValue.from_ctypes"]], "from_ctypes() (smallworld.state.fixedregister class method)": [[11, "smallworld.state.FixedRegister.from_ctypes"]], "from_ctypes() (smallworld.state.integervalue class method)": [[11, "smallworld.state.IntegerValue.from_ctypes"]], "from_ctypes() (smallworld.state.register class method)": [[11, "smallworld.state.Register.from_ctypes"]], "from_ctypes() (smallworld.state.registeralias class method)": [[11, "smallworld.state.RegisterAlias.from_ctypes"]], "from_ctypes() (smallworld.state.symbolicvalue class method)": [[11, "smallworld.state.SymbolicValue.from_ctypes"]], "from_ctypes() (smallworld.state.value class method)": [[11, "smallworld.state.Value.from_ctypes"]], "fuzz() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.fuzz"]], "fuzz_with_file() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.fuzz_with_file"]], "get() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.get"]], "get() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.get"]], "get() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.get"]], "get() (smallworld.state.register method)": [[11, "smallworld.state.Register.get"]], "get() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.get"]], "get() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.get"]], "get() (smallworld.state.value method)": [[11, "smallworld.state.Value.get"]], "get_bounds() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.get_bounds"]], "get_constraints() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.get_constraints"]], "get_content() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.get_content"]], "get_content() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.get_content"]], "get_content() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.get_content"]], "get_content() (smallworld.state.register method)": [[11, "smallworld.state.Register.get_content"]], "get_content() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.get_content"]], "get_content() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.get_content"]], "get_content() (smallworld.state.value method)": [[11, "smallworld.state.Value.get_content"]], "get_cpu() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.get_cpu"]], "get_cpus() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.get_cpus"]], "get_exit_points() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.get_exit_points"]], "get_label() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.get_label"]], "get_label() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.get_label"]], "get_label() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.get_label"]], "get_label() (smallworld.state.register method)": [[11, "smallworld.state.Register.get_label"]], "get_label() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.get_label"]], "get_label() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.get_label"]], "get_label() (smallworld.state.value method)": [[11, "smallworld.state.Value.get_label"]], "get_platform() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.get_platform"]], "get_platforms() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.get_platforms"]], "get_size() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.get_size"]], "get_size() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.get_size"]], "get_size() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.get_size"]], "get_size() (smallworld.state.register method)": [[11, "smallworld.state.Register.get_size"]], "get_size() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.get_size"]], "get_size() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.get_size"]], "get_size() (smallworld.state.value method)": [[11, "smallworld.state.Value.get_size"]], "get_type() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.get_type"]], "get_type() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.get_type"]], "get_type() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.get_type"]], "get_type() (smallworld.state.register method)": [[11, "smallworld.state.Register.get_type"]], "get_type() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.get_type"]], "get_type() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.get_type"]], "get_type() (smallworld.state.value method)": [[11, "smallworld.state.Value.get_type"]], "isdisjoint() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.isdisjoint"]], "name (smallworld.state.fixedregister attribute)": [[11, "smallworld.state.FixedRegister.name"]], "name (smallworld.state.register attribute)": [[11, "smallworld.state.Register.name"]], "name (smallworld.state.registeralias attribute)": [[11, "smallworld.state.RegisterAlias.name"]], "offset (smallworld.state.registeralias attribute)": [[11, "smallworld.state.RegisterAlias.offset"]], "pop() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.pop"]], "read_memory() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.read_memory"]], "reference (smallworld.state.registeralias attribute)": [[11, "smallworld.state.RegisterAlias.reference"]], "remove() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.remove"]], "set() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.set"]], "set() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.set"]], "set() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.set"]], "set() (smallworld.state.register method)": [[11, "smallworld.state.Register.set"]], "set() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.set"]], "set() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.set"]], "set() (smallworld.state.value method)": [[11, "smallworld.state.Value.set"]], "set_content() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.set_content"]], "set_content() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.set_content"]], "set_content() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.set_content"]], "set_content() (smallworld.state.register method)": [[11, "smallworld.state.Register.set_content"]], "set_content() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.set_content"]], "set_content() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.set_content"]], "set_content() (smallworld.state.value method)": [[11, "smallworld.state.Value.set_content"]], "set_label() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.set_label"]], "set_label() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.set_label"]], "set_label() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.set_label"]], "set_label() (smallworld.state.register method)": [[11, "smallworld.state.Register.set_label"]], "set_label() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.set_label"]], "set_label() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.set_label"]], "set_label() (smallworld.state.value method)": [[11, "smallworld.state.Value.set_label"]], "set_type() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.set_type"]], "set_type() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.set_type"]], "set_type() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.set_type"]], "set_type() (smallworld.state.register method)": [[11, "smallworld.state.Register.set_type"]], "set_type() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.set_type"]], "set_type() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.set_type"]], "set_type() (smallworld.state.value method)": [[11, "smallworld.state.Value.set_type"]], "size (smallworld.state.fixedregister attribute)": [[11, "smallworld.state.FixedRegister.size"]], "size (smallworld.state.register attribute)": [[11, "smallworld.state.Register.size"]], "size (smallworld.state.registeralias attribute)": [[11, "smallworld.state.RegisterAlias.size"]], "smallworld.state": [[11, "module-smallworld.state"]], "step() (smallworld.state.machine method)": [[11, "smallworld.state.Machine.step"]], "to_bytes() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.to_bytes"]], "to_bytes() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.to_bytes"]], "to_bytes() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.to_bytes"]], "to_bytes() (smallworld.state.register method)": [[11, "smallworld.state.Register.to_bytes"]], "to_bytes() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.to_bytes"]], "to_bytes() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.to_bytes"]], "to_bytes() (smallworld.state.value method)": [[11, "smallworld.state.Value.to_bytes"]], "to_symbolic() (smallworld.state.bytesvalue method)": [[11, "smallworld.state.BytesValue.to_symbolic"]], "to_symbolic() (smallworld.state.fixedregister method)": [[11, "smallworld.state.FixedRegister.to_symbolic"]], "to_symbolic() (smallworld.state.integervalue method)": [[11, "smallworld.state.IntegerValue.to_symbolic"]], "to_symbolic() (smallworld.state.register method)": [[11, "smallworld.state.Register.to_symbolic"]], "to_symbolic() (smallworld.state.registeralias method)": [[11, "smallworld.state.RegisterAlias.to_symbolic"]], "to_symbolic() (smallworld.state.symbolicvalue method)": [[11, "smallworld.state.SymbolicValue.to_symbolic"]], "to_symbolic() (smallworld.state.value method)": [[11, "smallworld.state.Value.to_symbolic"]], "aarch64 (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.AArch64"]], "amd64 (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.AMD64"]], "armv5t (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.ARMv5T"]], "armv6m (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.ARMv6M"]], "armv6mthumb (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.ARMv6MThumb"]], "armv7a (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.ARMv7A"]], "armv7m (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.ARMv7M"]], "armv7r (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.ARMv7R"]], "cpu (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.CPU"]], "i386 (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.I386"]], "mips64be (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.MIPS64BE"]], "mips64el (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.MIPS64EL"]], "mipsbe (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.MIPSBE"]], "mipsel (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.MIPSEL"]], "powerpc32 (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.PowerPC32"]], "powerpc64 (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.PowerPC64"]], "riscv64 (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.RISCV64"]], "xtensabe (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.XTensaBE"]], "xtensael (class in smallworld.state.cpus)": [[12, "smallworld.state.cpus.XTensaEL"]], "add() (smallworld.state.cpus.aarch64 method)": [[12, "smallworld.state.cpus.AArch64.add"]], "add() (smallworld.state.cpus.amd64 method)": [[12, "smallworld.state.cpus.AMD64.add"]], "add() (smallworld.state.cpus.armv5t method)": [[12, "smallworld.state.cpus.ARMv5T.add"]], "add() (smallworld.state.cpus.armv6m method)": [[12, "smallworld.state.cpus.ARMv6M.add"]], "add() (smallworld.state.cpus.armv6mthumb method)": [[12, "smallworld.state.cpus.ARMv6MThumb.add"]], "add() (smallworld.state.cpus.armv7a method)": [[12, "smallworld.state.cpus.ARMv7A.add"]], "add() (smallworld.state.cpus.armv7m method)": [[12, "smallworld.state.cpus.ARMv7M.add"]], "add() (smallworld.state.cpus.armv7r method)": [[12, "smallworld.state.cpus.ARMv7R.add"]], "add() (smallworld.state.cpus.cpu method)": [[12, "smallworld.state.cpus.CPU.add"]], "add() (smallworld.state.cpus.i386 method)": [[12, "smallworld.state.cpus.I386.add"]], "add() (smallworld.state.cpus.mips64be method)": [[12, "smallworld.state.cpus.MIPS64BE.add"]], "add() (smallworld.state.cpus.mips64el method)": [[12, "smallworld.state.cpus.MIPS64EL.add"]], "add() (smallworld.state.cpus.mipsbe method)": [[12, "smallworld.state.cpus.MIPSBE.add"]], "add() (smallworld.state.cpus.mipsel method)": [[12, "smallworld.state.cpus.MIPSEL.add"]], "add() (smallworld.state.cpus.powerpc32 method)": [[12, "smallworld.state.cpus.PowerPC32.add"]], "add() (smallworld.state.cpus.powerpc64 method)": [[12, "smallworld.state.cpus.PowerPC64.add"]], "add() (smallworld.state.cpus.riscv64 method)": [[12, "smallworld.state.cpus.RISCV64.add"]], "add() (smallworld.state.cpus.xtensabe method)": [[12, "smallworld.state.cpus.XTensaBE.add"]], "add() (smallworld.state.cpus.xtensael method)": [[12, "smallworld.state.cpus.XTensaEL.add"]], "apply() (smallworld.state.cpus.aarch64 method)": [[12, "smallworld.state.cpus.AArch64.apply"]], "apply() (smallworld.state.cpus.amd64 method)": [[12, "smallworld.state.cpus.AMD64.apply"]], "apply() (smallworld.state.cpus.armv5t method)": [[12, "smallworld.state.cpus.ARMv5T.apply"]], "apply() (smallworld.state.cpus.armv6m method)": [[12, "smallworld.state.cpus.ARMv6M.apply"]], "apply() (smallworld.state.cpus.armv6mthumb method)": [[12, "smallworld.state.cpus.ARMv6MThumb.apply"]], "apply() (smallworld.state.cpus.armv7a method)": [[12, "smallworld.state.cpus.ARMv7A.apply"]], "apply() (smallworld.state.cpus.armv7m method)": [[12, "smallworld.state.cpus.ARMv7M.apply"]], "apply() (smallworld.state.cpus.armv7r method)": [[12, "smallworld.state.cpus.ARMv7R.apply"]], "apply() (smallworld.state.cpus.cpu method)": [[12, "smallworld.state.cpus.CPU.apply"]], "apply() (smallworld.state.cpus.i386 method)": [[12, "smallworld.state.cpus.I386.apply"]], "apply() (smallworld.state.cpus.mips64be method)": [[12, "smallworld.state.cpus.MIPS64BE.apply"]], "apply() (smallworld.state.cpus.mips64el method)": [[12, "smallworld.state.cpus.MIPS64EL.apply"]], "apply() (smallworld.state.cpus.mipsbe method)": [[12, "smallworld.state.cpus.MIPSBE.apply"]], "apply() (smallworld.state.cpus.mipsel method)": [[12, "smallworld.state.cpus.MIPSEL.apply"]], "apply() (smallworld.state.cpus.powerpc32 method)": [[12, "smallworld.state.cpus.PowerPC32.apply"]], "apply() (smallworld.state.cpus.powerpc64 method)": [[12, "smallworld.state.cpus.PowerPC64.apply"]], "apply() (smallworld.state.cpus.riscv64 method)": [[12, "smallworld.state.cpus.RISCV64.apply"]], "apply() (smallworld.state.cpus.xtensabe method)": [[12, "smallworld.state.cpus.XTensaBE.apply"]], "apply() (smallworld.state.cpus.xtensael method)": [[12, "smallworld.state.cpus.XTensaEL.apply"]], "clear() (smallworld.state.cpus.aarch64 method)": [[12, "smallworld.state.cpus.AArch64.clear"]], "clear() (smallworld.state.cpus.amd64 method)": [[12, "smallworld.state.cpus.AMD64.clear"]], "clear() (smallworld.state.cpus.armv5t method)": [[12, "smallworld.state.cpus.ARMv5T.clear"]], "clear() (smallworld.state.cpus.armv6m method)": [[12, "smallworld.state.cpus.ARMv6M.clear"]], "clear() (smallworld.state.cpus.armv6mthumb method)": [[12, "smallworld.state.cpus.ARMv6MThumb.clear"]], "clear() (smallworld.state.cpus.armv7a method)": [[12, "smallworld.state.cpus.ARMv7A.clear"]], "clear() (smallworld.state.cpus.armv7m method)": [[12, "smallworld.state.cpus.ARMv7M.clear"]], "clear() (smallworld.state.cpus.armv7r method)": [[12, "smallworld.state.cpus.ARMv7R.clear"]], "clear() (smallworld.state.cpus.cpu method)": [[12, "smallworld.state.cpus.CPU.clear"]], "clear() (smallworld.state.cpus.i386 method)": [[12, "smallworld.state.cpus.I386.clear"]], "clear() (smallworld.state.cpus.mips64be method)": [[12, "smallworld.state.cpus.MIPS64BE.clear"]], "clear() (smallworld.state.cpus.mips64el method)": [[12, "smallworld.state.cpus.MIPS64EL.clear"]], "clear() (smallworld.state.cpus.mipsbe method)": [[12, "smallworld.state.cpus.MIPSBE.clear"]], "clear() (smallworld.state.cpus.mipsel method)": [[12, "smallworld.state.cpus.MIPSEL.clear"]], "clear() (smallworld.state.cpus.powerpc32 method)": [[12, "smallworld.state.cpus.PowerPC32.clear"]], "clear() (smallworld.state.cpus.powerpc64 method)": [[12, "smallworld.state.cpus.PowerPC64.clear"]], "clear() (smallworld.state.cpus.riscv64 method)": [[12, "smallworld.state.cpus.RISCV64.clear"]], "clear() (smallworld.state.cpus.xtensabe method)": [[12, "smallworld.state.cpus.XTensaBE.clear"]], "clear() (smallworld.state.cpus.xtensael method)": [[12, "smallworld.state.cpus.XTensaEL.clear"]], "discard() (smallworld.state.cpus.aarch64 method)": [[12, "smallworld.state.cpus.AArch64.discard"]], "discard() (smallworld.state.cpus.amd64 method)": [[12, "smallworld.state.cpus.AMD64.discard"]], "discard() (smallworld.state.cpus.armv5t method)": [[12, "smallworld.state.cpus.ARMv5T.discard"]], "discard() (smallworld.state.cpus.armv6m method)": [[12, "smallworld.state.cpus.ARMv6M.discard"]], "discard() (smallworld.state.cpus.armv6mthumb method)": [[12, "smallworld.state.cpus.ARMv6MThumb.discard"]], "discard() (smallworld.state.cpus.armv7a method)": [[12, "smallworld.state.cpus.ARMv7A.discard"]], "discard() (smallworld.state.cpus.armv7m method)": [[12, "smallworld.state.cpus.ARMv7M.discard"]], "discard() (smallworld.state.cpus.armv7r method)": [[12, "smallworld.state.cpus.ARMv7R.discard"]], "discard() (smallworld.state.cpus.cpu method)": [[12, "smallworld.state.cpus.CPU.discard"]], "discard() (smallworld.state.cpus.i386 method)": [[12, "smallworld.state.cpus.I386.discard"]], "discard() (smallworld.state.cpus.mips64be method)": [[12, "smallworld.state.cpus.MIPS64BE.discard"]], "discard() (smallworld.state.cpus.mips64el method)": [[12, "smallworld.state.cpus.MIPS64EL.discard"]], "discard() (smallworld.state.cpus.mipsbe method)": [[12, "smallworld.state.cpus.MIPSBE.discard"]], "discard() (smallworld.state.cpus.mipsel method)": [[12, "smallworld.state.cpus.MIPSEL.discard"]], "discard() (smallworld.state.cpus.powerpc32 method)": [[12, "smallworld.state.cpus.PowerPC32.discard"]], "discard() (smallworld.state.cpus.powerpc64 method)": [[12, "smallworld.state.cpus.PowerPC64.discard"]], "discard() (smallworld.state.cpus.riscv64 method)": [[12, "smallworld.state.cpus.RISCV64.discard"]], "discard() (smallworld.state.cpus.xtensabe method)": [[12, "smallworld.state.cpus.XTensaBE.discard"]], "discard() (smallworld.state.cpus.xtensael method)": [[12, "smallworld.state.cpus.XTensaEL.discard"]], "extract() (smallworld.state.cpus.aarch64 method)": [[12, "smallworld.state.cpus.AArch64.extract"]], "extract() (smallworld.state.cpus.amd64 method)": [[12, "smallworld.state.cpus.AMD64.extract"]], "extract() (smallworld.state.cpus.armv5t method)": [[12, "smallworld.state.cpus.ARMv5T.extract"]], "extract() (smallworld.state.cpus.armv6m method)": [[12, "smallworld.state.cpus.ARMv6M.extract"]], "extract() (smallworld.state.cpus.armv6mthumb method)": [[12, "smallworld.state.cpus.ARMv6MThumb.extract"]], "extract() (smallworld.state.cpus.armv7a method)": [[12, "smallworld.state.cpus.ARMv7A.extract"]], "extract() (smallworld.state.cpus.armv7m method)": [[12, "smallworld.state.cpus.ARMv7M.extract"]], "extract() (smallworld.state.cpus.armv7r method)": [[12, "smallworld.state.cpus.ARMv7R.extract"]], "extract() (smallworld.state.cpus.cpu method)": [[12, "smallworld.state.cpus.CPU.extract"]], "extract() (smallworld.state.cpus.i386 method)": [[12, "smallworld.state.cpus.I386.extract"]], "extract() (smallworld.state.cpus.mips64be method)": [[12, "smallworld.state.cpus.MIPS64BE.extract"]], "extract() (smallworld.state.cpus.mips64el method)": [[12, "smallworld.state.cpus.MIPS64EL.extract"]], "extract() (smallworld.state.cpus.mipsbe method)": [[12, "smallworld.state.cpus.MIPSBE.extract"]], "extract() (smallworld.state.cpus.mipsel method)": [[12, "smallworld.state.cpus.MIPSEL.extract"]], "extract() (smallworld.state.cpus.powerpc32 method)": [[12, "smallworld.state.cpus.PowerPC32.extract"]], "extract() (smallworld.state.cpus.powerpc64 method)": [[12, "smallworld.state.cpus.PowerPC64.extract"]], "extract() (smallworld.state.cpus.riscv64 method)": [[12, "smallworld.state.cpus.RISCV64.extract"]], "extract() (smallworld.state.cpus.xtensabe method)": [[12, "smallworld.state.cpus.XTensaBE.extract"]], "extract() (smallworld.state.cpus.xtensael method)": [[12, "smallworld.state.cpus.XTensaEL.extract"]], "for_platform() (smallworld.state.cpus.aarch64 class method)": [[12, "smallworld.state.cpus.AArch64.for_platform"]], "for_platform() (smallworld.state.cpus.amd64 class method)": [[12, "smallworld.state.cpus.AMD64.for_platform"]], "for_platform() (smallworld.state.cpus.armv5t class method)": [[12, "smallworld.state.cpus.ARMv5T.for_platform"]], "for_platform() (smallworld.state.cpus.armv6m class method)": [[12, "smallworld.state.cpus.ARMv6M.for_platform"]], "for_platform() (smallworld.state.cpus.armv6mthumb class method)": [[12, "smallworld.state.cpus.ARMv6MThumb.for_platform"]], "for_platform() (smallworld.state.cpus.armv7a class method)": [[12, "smallworld.state.cpus.ARMv7A.for_platform"]], "for_platform() (smallworld.state.cpus.armv7m class method)": [[12, "smallworld.state.cpus.ARMv7M.for_platform"]], "for_platform() (smallworld.state.cpus.armv7r class method)": [[12, "smallworld.state.cpus.ARMv7R.for_platform"]], "for_platform() (smallworld.state.cpus.cpu class method)": [[12, "smallworld.state.cpus.CPU.for_platform"]], "for_platform() (smallworld.state.cpus.i386 class method)": [[12, "smallworld.state.cpus.I386.for_platform"]], "for_platform() (smallworld.state.cpus.mips64be class method)": [[12, "smallworld.state.cpus.MIPS64BE.for_platform"]], "for_platform() (smallworld.state.cpus.mips64el class method)": [[12, "smallworld.state.cpus.MIPS64EL.for_platform"]], "for_platform() (smallworld.state.cpus.mipsbe class method)": [[12, "smallworld.state.cpus.MIPSBE.for_platform"]], "for_platform() (smallworld.state.cpus.mipsel class method)": [[12, "smallworld.state.cpus.MIPSEL.for_platform"]], "for_platform() (smallworld.state.cpus.powerpc32 class method)": [[12, "smallworld.state.cpus.PowerPC32.for_platform"]], "for_platform() (smallworld.state.cpus.powerpc64 class method)": [[12, "smallworld.state.cpus.PowerPC64.for_platform"]], "for_platform() (smallworld.state.cpus.riscv64 class method)": [[12, "smallworld.state.cpus.RISCV64.for_platform"]], "for_platform() (smallworld.state.cpus.xtensabe class method)": [[12, "smallworld.state.cpus.XTensaBE.for_platform"]], "for_platform() (smallworld.state.cpus.xtensael class method)": [[12, "smallworld.state.cpus.XTensaEL.for_platform"]], "get_platform() (smallworld.state.cpus.aarch64 class method)": [[12, "smallworld.state.cpus.AArch64.get_platform"]], "get_platform() (smallworld.state.cpus.amd64 class method)": [[12, "smallworld.state.cpus.AMD64.get_platform"]], "get_platform() (smallworld.state.cpus.armv5t class method)": [[12, "smallworld.state.cpus.ARMv5T.get_platform"]], "get_platform() (smallworld.state.cpus.armv6m class method)": [[12, "smallworld.state.cpus.ARMv6M.get_platform"]], "get_platform() (smallworld.state.cpus.armv6mthumb class method)": [[12, "smallworld.state.cpus.ARMv6MThumb.get_platform"]], "get_platform() (smallworld.state.cpus.armv7a class method)": [[12, "smallworld.state.cpus.ARMv7A.get_platform"]], "get_platform() (smallworld.state.cpus.armv7m class method)": [[12, "smallworld.state.cpus.ARMv7M.get_platform"]], "get_platform() (smallworld.state.cpus.armv7r class method)": [[12, "smallworld.state.cpus.ARMv7R.get_platform"]], "get_platform() (smallworld.state.cpus.cpu class method)": [[12, "smallworld.state.cpus.CPU.get_platform"]], "get_platform() (smallworld.state.cpus.i386 class method)": [[12, "smallworld.state.cpus.I386.get_platform"]], "get_platform() (smallworld.state.cpus.mips64be class method)": [[12, "smallworld.state.cpus.MIPS64BE.get_platform"]], "get_platform() (smallworld.state.cpus.mips64el class method)": [[12, "smallworld.state.cpus.MIPS64EL.get_platform"]], "get_platform() (smallworld.state.cpus.mipsbe class method)": [[12, "smallworld.state.cpus.MIPSBE.get_platform"]], "get_platform() (smallworld.state.cpus.mipsel class method)": [[12, "smallworld.state.cpus.MIPSEL.get_platform"]], "get_platform() (smallworld.state.cpus.powerpc32 class method)": [[12, "smallworld.state.cpus.PowerPC32.get_platform"]], "get_platform() (smallworld.state.cpus.powerpc64 class method)": [[12, "smallworld.state.cpus.PowerPC64.get_platform"]], "get_platform() (smallworld.state.cpus.riscv64 class method)": [[12, "smallworld.state.cpus.RISCV64.get_platform"]], "get_platform() (smallworld.state.cpus.xtensabe class method)": [[12, "smallworld.state.cpus.XTensaBE.get_platform"]], "get_platform() (smallworld.state.cpus.xtensael class method)": [[12, "smallworld.state.cpus.XTensaEL.get_platform"]], "isdisjoint() (smallworld.state.cpus.aarch64 method)": [[12, "smallworld.state.cpus.AArch64.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.amd64 method)": [[12, "smallworld.state.cpus.AMD64.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.armv5t method)": [[12, "smallworld.state.cpus.ARMv5T.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.armv6m method)": [[12, "smallworld.state.cpus.ARMv6M.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.armv6mthumb method)": [[12, "smallworld.state.cpus.ARMv6MThumb.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.armv7a method)": [[12, "smallworld.state.cpus.ARMv7A.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.armv7m method)": [[12, "smallworld.state.cpus.ARMv7M.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.armv7r method)": [[12, "smallworld.state.cpus.ARMv7R.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.cpu method)": [[12, "smallworld.state.cpus.CPU.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.i386 method)": [[12, "smallworld.state.cpus.I386.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.mips64be method)": [[12, "smallworld.state.cpus.MIPS64BE.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.mips64el method)": [[12, "smallworld.state.cpus.MIPS64EL.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.mipsbe method)": [[12, "smallworld.state.cpus.MIPSBE.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.mipsel method)": [[12, "smallworld.state.cpus.MIPSEL.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.powerpc32 method)": [[12, "smallworld.state.cpus.PowerPC32.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.powerpc64 method)": [[12, "smallworld.state.cpus.PowerPC64.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.riscv64 method)": [[12, "smallworld.state.cpus.RISCV64.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.xtensabe method)": [[12, "smallworld.state.cpus.XTensaBE.isdisjoint"]], "isdisjoint() (smallworld.state.cpus.xtensael method)": [[12, "smallworld.state.cpus.XTensaEL.isdisjoint"]], "pop() (smallworld.state.cpus.aarch64 method)": [[12, "smallworld.state.cpus.AArch64.pop"]], "pop() (smallworld.state.cpus.amd64 method)": [[12, "smallworld.state.cpus.AMD64.pop"]], "pop() (smallworld.state.cpus.armv5t method)": [[12, "smallworld.state.cpus.ARMv5T.pop"]], "pop() (smallworld.state.cpus.armv6m method)": [[12, "smallworld.state.cpus.ARMv6M.pop"]], "pop() (smallworld.state.cpus.armv6mthumb method)": [[12, "smallworld.state.cpus.ARMv6MThumb.pop"]], "pop() (smallworld.state.cpus.armv7a method)": [[12, "smallworld.state.cpus.ARMv7A.pop"]], "pop() (smallworld.state.cpus.armv7m method)": [[12, "smallworld.state.cpus.ARMv7M.pop"]], "pop() (smallworld.state.cpus.armv7r method)": [[12, "smallworld.state.cpus.ARMv7R.pop"]], "pop() (smallworld.state.cpus.cpu method)": [[12, "smallworld.state.cpus.CPU.pop"]], "pop() (smallworld.state.cpus.i386 method)": [[12, "smallworld.state.cpus.I386.pop"]], "pop() (smallworld.state.cpus.mips64be method)": [[12, "smallworld.state.cpus.MIPS64BE.pop"]], "pop() (smallworld.state.cpus.mips64el method)": [[12, "smallworld.state.cpus.MIPS64EL.pop"]], "pop() (smallworld.state.cpus.mipsbe method)": [[12, "smallworld.state.cpus.MIPSBE.pop"]], "pop() (smallworld.state.cpus.mipsel method)": [[12, "smallworld.state.cpus.MIPSEL.pop"]], "pop() (smallworld.state.cpus.powerpc32 method)": [[12, "smallworld.state.cpus.PowerPC32.pop"]], "pop() (smallworld.state.cpus.powerpc64 method)": [[12, "smallworld.state.cpus.PowerPC64.pop"]], "pop() (smallworld.state.cpus.riscv64 method)": [[12, "smallworld.state.cpus.RISCV64.pop"]], "pop() (smallworld.state.cpus.xtensabe method)": [[12, "smallworld.state.cpus.XTensaBE.pop"]], "pop() (smallworld.state.cpus.xtensael method)": [[12, "smallworld.state.cpus.XTensaEL.pop"]], "remove() (smallworld.state.cpus.aarch64 method)": [[12, "smallworld.state.cpus.AArch64.remove"]], "remove() (smallworld.state.cpus.amd64 method)": [[12, "smallworld.state.cpus.AMD64.remove"]], "remove() (smallworld.state.cpus.armv5t method)": [[12, "smallworld.state.cpus.ARMv5T.remove"]], "remove() (smallworld.state.cpus.armv6m method)": [[12, "smallworld.state.cpus.ARMv6M.remove"]], "remove() (smallworld.state.cpus.armv6mthumb method)": [[12, "smallworld.state.cpus.ARMv6MThumb.remove"]], "remove() (smallworld.state.cpus.armv7a method)": [[12, "smallworld.state.cpus.ARMv7A.remove"]], "remove() (smallworld.state.cpus.armv7m method)": [[12, "smallworld.state.cpus.ARMv7M.remove"]], "remove() (smallworld.state.cpus.armv7r method)": [[12, "smallworld.state.cpus.ARMv7R.remove"]], "remove() (smallworld.state.cpus.cpu method)": [[12, "smallworld.state.cpus.CPU.remove"]], "remove() (smallworld.state.cpus.i386 method)": [[12, "smallworld.state.cpus.I386.remove"]], "remove() (smallworld.state.cpus.mips64be method)": [[12, "smallworld.state.cpus.MIPS64BE.remove"]], "remove() (smallworld.state.cpus.mips64el method)": [[12, "smallworld.state.cpus.MIPS64EL.remove"]], "remove() (smallworld.state.cpus.mipsbe method)": [[12, "smallworld.state.cpus.MIPSBE.remove"]], "remove() (smallworld.state.cpus.mipsel method)": [[12, "smallworld.state.cpus.MIPSEL.remove"]], "remove() (smallworld.state.cpus.powerpc32 method)": [[12, "smallworld.state.cpus.PowerPC32.remove"]], "remove() (smallworld.state.cpus.powerpc64 method)": [[12, "smallworld.state.cpus.PowerPC64.remove"]], "remove() (smallworld.state.cpus.riscv64 method)": [[12, "smallworld.state.cpus.RISCV64.remove"]], "remove() (smallworld.state.cpus.xtensabe method)": [[12, "smallworld.state.cpus.XTensaBE.remove"]], "remove() (smallworld.state.cpus.xtensael method)": [[12, "smallworld.state.cpus.XTensaEL.remove"]], "smallworld.state.cpus": [[12, "module-smallworld.state.cpus"]], "elfcorefile (class in smallworld.state.memory)": [[13, "smallworld.state.memory.ElfCoreFile"]], "elfexecutable (class in smallworld.state.memory)": [[13, "smallworld.state.memory.ElfExecutable"]], "memory (class in smallworld.state.memory)": [[13, "smallworld.state.memory.Memory"]], "rawmemory (class in smallworld.state.memory)": [[13, "smallworld.state.memory.RawMemory"]], "address (smallworld.state.memory.elfcorefile attribute)": [[13, "smallworld.state.memory.ElfCoreFile.address"]], "address (smallworld.state.memory.elfexecutable attribute)": [[13, "smallworld.state.memory.ElfExecutable.address"]], "address (smallworld.state.memory.memory attribute)": [[13, "smallworld.state.memory.Memory.address"]], "address (smallworld.state.memory.rawmemory attribute)": [[13, "smallworld.state.memory.RawMemory.address"]], "apply() (smallworld.state.memory.elfcorefile method)": [[13, "smallworld.state.memory.ElfCoreFile.apply"]], "apply() (smallworld.state.memory.elfexecutable method)": [[13, "smallworld.state.memory.ElfExecutable.apply"]], "apply() (smallworld.state.memory.memory method)": [[13, "smallworld.state.memory.Memory.apply"]], "apply() (smallworld.state.memory.rawmemory method)": [[13, "smallworld.state.memory.RawMemory.apply"]], "entrypoint (smallworld.state.memory.elfcorefile attribute)": [[13, "smallworld.state.memory.ElfCoreFile.entrypoint"]], "entrypoint (smallworld.state.memory.elfexecutable attribute)": [[13, "smallworld.state.memory.ElfExecutable.entrypoint"]], "extract() (smallworld.state.memory.elfcorefile method)": [[13, "smallworld.state.memory.ElfCoreFile.extract"]], "extract() (smallworld.state.memory.elfexecutable method)": [[13, "smallworld.state.memory.ElfExecutable.extract"]], "extract() (smallworld.state.memory.memory method)": [[13, "smallworld.state.memory.Memory.extract"]], "extract() (smallworld.state.memory.rawmemory method)": [[13, "smallworld.state.memory.RawMemory.extract"]], "from_bytes() (smallworld.state.memory.elfcorefile class method)": [[13, "smallworld.state.memory.ElfCoreFile.from_bytes"]], "from_bytes() (smallworld.state.memory.elfexecutable class method)": [[13, "smallworld.state.memory.ElfExecutable.from_bytes"]], "from_bytes() (smallworld.state.memory.rawmemory class method)": [[13, "smallworld.state.memory.RawMemory.from_bytes"]], "from_elf() (smallworld.state.memory.elfcorefile class method)": [[13, "smallworld.state.memory.ElfCoreFile.from_elf"]], "from_elf() (smallworld.state.memory.elfexecutable class method)": [[13, "smallworld.state.memory.ElfExecutable.from_elf"]], "from_elf_core() (smallworld.state.memory.elfcorefile class method)": [[13, "smallworld.state.memory.ElfCoreFile.from_elf_core"]], "from_elf_core() (smallworld.state.memory.elfexecutable class method)": [[13, "smallworld.state.memory.ElfExecutable.from_elf_core"]], "from_file() (smallworld.state.memory.elfcorefile class method)": [[13, "smallworld.state.memory.ElfCoreFile.from_file"]], "from_file() (smallworld.state.memory.elfexecutable class method)": [[13, "smallworld.state.memory.ElfExecutable.from_file"]], "from_file() (smallworld.state.memory.rawmemory class method)": [[13, "smallworld.state.memory.RawMemory.from_file"]], "from_filepath() (smallworld.state.memory.elfcorefile class method)": [[13, "smallworld.state.memory.ElfCoreFile.from_filepath"]], "from_filepath() (smallworld.state.memory.elfexecutable class method)": [[13, "smallworld.state.memory.ElfExecutable.from_filepath"]], "from_filepath() (smallworld.state.memory.rawmemory class method)": [[13, "smallworld.state.memory.RawMemory.from_filepath"]], "from_pe() (smallworld.state.memory.elfcorefile class method)": [[13, "smallworld.state.memory.ElfCoreFile.from_pe"]], "from_pe() (smallworld.state.memory.elfexecutable class method)": [[13, "smallworld.state.memory.ElfExecutable.from_pe"]], "get_capacity() (smallworld.state.memory.elfcorefile method)": [[13, "smallworld.state.memory.ElfCoreFile.get_capacity"]], "get_capacity() (smallworld.state.memory.elfexecutable method)": [[13, "smallworld.state.memory.ElfExecutable.get_capacity"]], "get_capacity() (smallworld.state.memory.memory method)": [[13, "smallworld.state.memory.Memory.get_capacity"]], "get_capacity() (smallworld.state.memory.rawmemory method)": [[13, "smallworld.state.memory.RawMemory.get_capacity"]], "get_symbol_size() (smallworld.state.memory.elfcorefile method)": [[13, "smallworld.state.memory.ElfCoreFile.get_symbol_size"]], "get_symbol_size() (smallworld.state.memory.elfexecutable method)": [[13, "smallworld.state.memory.ElfExecutable.get_symbol_size"]], "get_symbol_value() (smallworld.state.memory.elfcorefile method)": [[13, "smallworld.state.memory.ElfCoreFile.get_symbol_value"]], "get_symbol_value() (smallworld.state.memory.elfexecutable method)": [[13, "smallworld.state.memory.ElfExecutable.get_symbol_value"]], "get_used() (smallworld.state.memory.elfcorefile method)": [[13, "smallworld.state.memory.ElfCoreFile.get_used"]], "get_used() (smallworld.state.memory.elfexecutable method)": [[13, "smallworld.state.memory.ElfExecutable.get_used"]], "get_used() (smallworld.state.memory.memory method)": [[13, "smallworld.state.memory.Memory.get_used"]], "get_used() (smallworld.state.memory.rawmemory method)": [[13, "smallworld.state.memory.RawMemory.get_used"]], "link_elf() (smallworld.state.memory.elfcorefile method)": [[13, "smallworld.state.memory.ElfCoreFile.link_elf"]], "link_elf() (smallworld.state.memory.elfexecutable method)": [[13, "smallworld.state.memory.ElfExecutable.link_elf"]], "size (smallworld.state.memory.elfcorefile attribute)": [[13, "smallworld.state.memory.ElfCoreFile.size"]], "size (smallworld.state.memory.elfexecutable attribute)": [[13, "smallworld.state.memory.ElfExecutable.size"]], "size (smallworld.state.memory.memory attribute)": [[13, "smallworld.state.memory.Memory.size"]], "size (smallworld.state.memory.rawmemory attribute)": [[13, "smallworld.state.memory.RawMemory.size"]], "smallworld.state.memory": [[13, "module-smallworld.state.memory"]], "to_bytes() (smallworld.state.memory.elfcorefile method)": [[13, "smallworld.state.memory.ElfCoreFile.to_bytes"]], "to_bytes() (smallworld.state.memory.elfexecutable method)": [[13, "smallworld.state.memory.ElfExecutable.to_bytes"]], "to_bytes() (smallworld.state.memory.memory method)": [[13, "smallworld.state.memory.Memory.to_bytes"]], "to_bytes() (smallworld.state.memory.rawmemory method)": [[13, "smallworld.state.memory.RawMemory.to_bytes"]], "update_symbol_value() (smallworld.state.memory.elfcorefile method)": [[13, "smallworld.state.memory.ElfCoreFile.update_symbol_value"]], "update_symbol_value() (smallworld.state.memory.elfexecutable method)": [[13, "smallworld.state.memory.ElfExecutable.update_symbol_value"]], "executable (class in smallworld.state.memory.code)": [[14, "smallworld.state.memory.code.Executable"]], "address (smallworld.state.memory.code.executable attribute)": [[14, "smallworld.state.memory.code.Executable.address"]], "apply() (smallworld.state.memory.code.executable method)": [[14, "smallworld.state.memory.code.Executable.apply"]], "entrypoint (smallworld.state.memory.code.executable attribute)": [[14, "smallworld.state.memory.code.Executable.entrypoint"]], "extract() (smallworld.state.memory.code.executable method)": [[14, "smallworld.state.memory.code.Executable.extract"]], "from_bytes() (smallworld.state.memory.code.executable class method)": [[14, "smallworld.state.memory.code.Executable.from_bytes"]], "from_elf() (smallworld.state.memory.code.executable class method)": [[14, "smallworld.state.memory.code.Executable.from_elf"]], "from_elf_core() (smallworld.state.memory.code.executable class method)": [[14, "smallworld.state.memory.code.Executable.from_elf_core"]], "from_file() (smallworld.state.memory.code.executable class method)": [[14, "smallworld.state.memory.code.Executable.from_file"]], "from_filepath() (smallworld.state.memory.code.executable class method)": [[14, "smallworld.state.memory.code.Executable.from_filepath"]], "from_pe() (smallworld.state.memory.code.executable class method)": [[14, "smallworld.state.memory.code.Executable.from_pe"]], "get_capacity() (smallworld.state.memory.code.executable method)": [[14, "smallworld.state.memory.code.Executable.get_capacity"]], "get_used() (smallworld.state.memory.code.executable method)": [[14, "smallworld.state.memory.code.Executable.get_used"]], "size (smallworld.state.memory.code.executable attribute)": [[14, "smallworld.state.memory.code.Executable.size"]], "smallworld.state.memory.code": [[14, "module-smallworld.state.memory.code"]], "to_bytes() (smallworld.state.memory.code.executable method)": [[14, "smallworld.state.memory.code.Executable.to_bytes"]], "bumpallocator (class in smallworld.state.memory.heap)": [[15, "smallworld.state.memory.heap.BumpAllocator"]], "heap (class in smallworld.state.memory.heap)": [[15, "smallworld.state.memory.heap.Heap"]], "address (smallworld.state.memory.heap.bumpallocator attribute)": [[15, "smallworld.state.memory.heap.BumpAllocator.address"]], "address (smallworld.state.memory.heap.heap attribute)": [[15, "smallworld.state.memory.heap.Heap.address"]], "allocate() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.allocate"]], "allocate() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.allocate"]], "allocate_bytes() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.allocate_bytes"]], "allocate_bytes() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.allocate_bytes"]], "allocate_ctype() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.allocate_ctype"]], "allocate_ctype() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.allocate_ctype"]], "allocate_integer() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.allocate_integer"]], "allocate_integer() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.allocate_integer"]], "apply() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.apply"]], "apply() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.apply"]], "extract() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.extract"]], "extract() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.extract"]], "free() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.free"]], "free() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.free"]], "get_capacity() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.get_capacity"]], "get_capacity() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.get_capacity"]], "get_used() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.get_used"]], "get_used() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.get_used"]], "size (smallworld.state.memory.heap.bumpallocator attribute)": [[15, "smallworld.state.memory.heap.BumpAllocator.size"]], "size (smallworld.state.memory.heap.heap attribute)": [[15, "smallworld.state.memory.heap.Heap.size"]], "smallworld.state.memory.heap": [[15, "module-smallworld.state.memory.heap"]], "to_bytes() (smallworld.state.memory.heap.bumpallocator method)": [[15, "smallworld.state.memory.heap.BumpAllocator.to_bytes"]], "to_bytes() (smallworld.state.memory.heap.heap method)": [[15, "smallworld.state.memory.heap.Heap.to_bytes"]], "aarch64stack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.AArch64Stack"]], "amd64stack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.AMD64Stack"]], "armv5tstack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.ARMv5tStack"]], "armv6mstack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.ARMv6mStack"]], "armv7astack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.ARMv7aStack"]], "armv7mstack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.ARMv7mStack"]], "armv7rstack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.ARMv7rStack"]], "mips64bestack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.MIPS64BEStack"]], "mips64elstack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.MIPS64ELStack"]], "mipsbestack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.MIPSBEStack"]], "mipselstack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.MIPSELStack"]], "powerpc32stack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.PowerPC32Stack"]], "powerpc64stack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.PowerPC64Stack"]], "riscv64stack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.RISCV64Stack"]], "stack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.Stack"]], "x86stack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.X86Stack"]], "xtensabestack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.XTensaBEStack"]], "xtensaelstack (class in smallworld.state.memory.stack)": [[16, "smallworld.state.memory.stack.XTensaELStack"]], "address (smallworld.state.memory.stack.aarch64stack attribute)": [[16, "smallworld.state.memory.stack.AArch64Stack.address"]], "address (smallworld.state.memory.stack.amd64stack attribute)": [[16, "smallworld.state.memory.stack.AMD64Stack.address"]], "address (smallworld.state.memory.stack.armv5tstack attribute)": [[16, "smallworld.state.memory.stack.ARMv5tStack.address"]], "address (smallworld.state.memory.stack.armv6mstack attribute)": [[16, "smallworld.state.memory.stack.ARMv6mStack.address"]], "address (smallworld.state.memory.stack.armv7astack attribute)": [[16, "smallworld.state.memory.stack.ARMv7aStack.address"]], "address (smallworld.state.memory.stack.armv7mstack attribute)": [[16, "smallworld.state.memory.stack.ARMv7mStack.address"]], "address (smallworld.state.memory.stack.armv7rstack attribute)": [[16, "smallworld.state.memory.stack.ARMv7rStack.address"]], "address (smallworld.state.memory.stack.mips64bestack attribute)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.address"]], "address (smallworld.state.memory.stack.mips64elstack attribute)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.address"]], "address (smallworld.state.memory.stack.mipsbestack attribute)": [[16, "smallworld.state.memory.stack.MIPSBEStack.address"]], "address (smallworld.state.memory.stack.mipselstack attribute)": [[16, "smallworld.state.memory.stack.MIPSELStack.address"]], "address (smallworld.state.memory.stack.powerpc32stack attribute)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.address"]], "address (smallworld.state.memory.stack.powerpc64stack attribute)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.address"]], "address (smallworld.state.memory.stack.riscv64stack attribute)": [[16, "smallworld.state.memory.stack.RISCV64Stack.address"]], "address (smallworld.state.memory.stack.stack attribute)": [[16, "smallworld.state.memory.stack.Stack.address"]], "address (smallworld.state.memory.stack.x86stack attribute)": [[16, "smallworld.state.memory.stack.X86Stack.address"]], "address (smallworld.state.memory.stack.xtensabestack attribute)": [[16, "smallworld.state.memory.stack.XTensaBEStack.address"]], "address (smallworld.state.memory.stack.xtensaelstack attribute)": [[16, "smallworld.state.memory.stack.XTensaELStack.address"]], "apply() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.apply"]], "apply() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.apply"]], "apply() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.apply"]], "apply() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.apply"]], "apply() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.apply"]], "apply() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.apply"]], "apply() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.apply"]], "apply() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.apply"]], "apply() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.apply"]], "apply() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.apply"]], "apply() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.apply"]], "apply() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.apply"]], "apply() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.apply"]], "apply() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.apply"]], "apply() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.apply"]], "apply() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.apply"]], "apply() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.apply"]], "apply() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.apply"]], "extract() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.extract"]], "extract() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.extract"]], "extract() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.extract"]], "extract() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.extract"]], "extract() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.extract"]], "extract() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.extract"]], "extract() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.extract"]], "extract() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.extract"]], "extract() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.extract"]], "extract() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.extract"]], "extract() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.extract"]], "extract() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.extract"]], "extract() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.extract"]], "extract() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.extract"]], "extract() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.extract"]], "extract() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.extract"]], "extract() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.extract"]], "extract() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.extract"]], "for_platform() (smallworld.state.memory.stack.aarch64stack class method)": [[16, "smallworld.state.memory.stack.AArch64Stack.for_platform"]], "for_platform() (smallworld.state.memory.stack.amd64stack class method)": [[16, "smallworld.state.memory.stack.AMD64Stack.for_platform"]], "for_platform() (smallworld.state.memory.stack.armv5tstack class method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.armv6mstack class method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.armv7astack class method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.armv7mstack class method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.armv7rstack class method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.mips64bestack class method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.mips64elstack class method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.mipsbestack class method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.mipselstack class method)": [[16, "smallworld.state.memory.stack.MIPSELStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.powerpc32stack class method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.for_platform"]], "for_platform() (smallworld.state.memory.stack.powerpc64stack class method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.for_platform"]], "for_platform() (smallworld.state.memory.stack.riscv64stack class method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.for_platform"]], "for_platform() (smallworld.state.memory.stack.stack class method)": [[16, "smallworld.state.memory.stack.Stack.for_platform"]], "for_platform() (smallworld.state.memory.stack.x86stack class method)": [[16, "smallworld.state.memory.stack.X86Stack.for_platform"]], "for_platform() (smallworld.state.memory.stack.xtensabestack class method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.for_platform"]], "for_platform() (smallworld.state.memory.stack.xtensaelstack class method)": [[16, "smallworld.state.memory.stack.XTensaELStack.for_platform"]], "get_alignment() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.get_alignment"]], "get_alignment() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.get_alignment"]], "get_capacity() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.get_capacity"]], "get_capacity() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.get_capacity"]], "get_platform() (smallworld.state.memory.stack.aarch64stack class method)": [[16, "smallworld.state.memory.stack.AArch64Stack.get_platform"]], "get_platform() (smallworld.state.memory.stack.amd64stack class method)": [[16, "smallworld.state.memory.stack.AMD64Stack.get_platform"]], "get_platform() (smallworld.state.memory.stack.armv5tstack class method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.armv6mstack class method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.armv7astack class method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.armv7mstack class method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.armv7rstack class method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.mips64bestack class method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.mips64elstack class method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.mipsbestack class method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.mipselstack class method)": [[16, "smallworld.state.memory.stack.MIPSELStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.powerpc32stack class method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.get_platform"]], "get_platform() (smallworld.state.memory.stack.powerpc64stack class method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.get_platform"]], "get_platform() (smallworld.state.memory.stack.riscv64stack class method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.get_platform"]], "get_platform() (smallworld.state.memory.stack.stack class method)": [[16, "smallworld.state.memory.stack.Stack.get_platform"]], "get_platform() (smallworld.state.memory.stack.x86stack class method)": [[16, "smallworld.state.memory.stack.X86Stack.get_platform"]], "get_platform() (smallworld.state.memory.stack.xtensabestack class method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.get_platform"]], "get_platform() (smallworld.state.memory.stack.xtensaelstack class method)": [[16, "smallworld.state.memory.stack.XTensaELStack.get_platform"]], "get_pointer() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.get_pointer"]], "get_pointer() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.get_pointer"]], "get_used() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.get_used"]], "get_used() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.get_used"]], "get_used() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.get_used"]], "get_used() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.get_used"]], "get_used() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.get_used"]], "get_used() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.get_used"]], "get_used() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.get_used"]], "get_used() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.get_used"]], "get_used() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.get_used"]], "get_used() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.get_used"]], "get_used() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.get_used"]], "get_used() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.get_used"]], "get_used() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.get_used"]], "get_used() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.get_used"]], "get_used() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.get_used"]], "get_used() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.get_used"]], "get_used() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.get_used"]], "get_used() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.get_used"]], "platform (smallworld.state.memory.stack.stack property)": [[16, "smallworld.state.memory.stack.Stack.platform"]], "push() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.push"]], "push() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.push"]], "push() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.push"]], "push() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.push"]], "push() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.push"]], "push() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.push"]], "push() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.push"]], "push() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.push"]], "push() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.push"]], "push() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.push"]], "push() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.push"]], "push() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.push"]], "push() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.push"]], "push() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.push"]], "push() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.push"]], "push() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.push"]], "push() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.push"]], "push() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.push"]], "push_bytes() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.push_bytes"]], "push_bytes() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.push_bytes"]], "push_ctype() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.push_ctype"]], "push_ctype() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.push_ctype"]], "push_integer() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.push_integer"]], "push_integer() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.push_integer"]], "push_integer() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.push_integer"]], "push_integer() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.push_integer"]], "push_integer() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.push_integer"]], "push_integer() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.push_integer"]], "push_integer() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.push_integer"]], "push_integer() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.push_integer"]], "push_integer() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.push_integer"]], "size (smallworld.state.memory.stack.aarch64stack attribute)": [[16, "smallworld.state.memory.stack.AArch64Stack.size"]], "size (smallworld.state.memory.stack.amd64stack attribute)": [[16, "smallworld.state.memory.stack.AMD64Stack.size"]], "size (smallworld.state.memory.stack.armv5tstack attribute)": [[16, "smallworld.state.memory.stack.ARMv5tStack.size"]], "size (smallworld.state.memory.stack.armv6mstack attribute)": [[16, "smallworld.state.memory.stack.ARMv6mStack.size"]], "size (smallworld.state.memory.stack.armv7astack attribute)": [[16, "smallworld.state.memory.stack.ARMv7aStack.size"]], "size (smallworld.state.memory.stack.armv7mstack attribute)": [[16, "smallworld.state.memory.stack.ARMv7mStack.size"]], "size (smallworld.state.memory.stack.armv7rstack attribute)": [[16, "smallworld.state.memory.stack.ARMv7rStack.size"]], "size (smallworld.state.memory.stack.mips64bestack attribute)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.size"]], "size (smallworld.state.memory.stack.mips64elstack attribute)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.size"]], "size (smallworld.state.memory.stack.mipsbestack attribute)": [[16, "smallworld.state.memory.stack.MIPSBEStack.size"]], "size (smallworld.state.memory.stack.mipselstack attribute)": [[16, "smallworld.state.memory.stack.MIPSELStack.size"]], "size (smallworld.state.memory.stack.powerpc32stack attribute)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.size"]], "size (smallworld.state.memory.stack.powerpc64stack attribute)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.size"]], "size (smallworld.state.memory.stack.riscv64stack attribute)": [[16, "smallworld.state.memory.stack.RISCV64Stack.size"]], "size (smallworld.state.memory.stack.stack attribute)": [[16, "smallworld.state.memory.stack.Stack.size"]], "size (smallworld.state.memory.stack.x86stack attribute)": [[16, "smallworld.state.memory.stack.X86Stack.size"]], "size (smallworld.state.memory.stack.xtensabestack attribute)": [[16, "smallworld.state.memory.stack.XTensaBEStack.size"]], "size (smallworld.state.memory.stack.xtensaelstack attribute)": [[16, "smallworld.state.memory.stack.XTensaELStack.size"]], "smallworld.state.memory.stack": [[16, "module-smallworld.state.memory.stack"]], "to_bytes() (smallworld.state.memory.stack.aarch64stack method)": [[16, "smallworld.state.memory.stack.AArch64Stack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.amd64stack method)": [[16, "smallworld.state.memory.stack.AMD64Stack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.armv5tstack method)": [[16, "smallworld.state.memory.stack.ARMv5tStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.armv6mstack method)": [[16, "smallworld.state.memory.stack.ARMv6mStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.armv7astack method)": [[16, "smallworld.state.memory.stack.ARMv7aStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.armv7mstack method)": [[16, "smallworld.state.memory.stack.ARMv7mStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.armv7rstack method)": [[16, "smallworld.state.memory.stack.ARMv7rStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.mips64bestack method)": [[16, "smallworld.state.memory.stack.MIPS64BEStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.mips64elstack method)": [[16, "smallworld.state.memory.stack.MIPS64ELStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.mipsbestack method)": [[16, "smallworld.state.memory.stack.MIPSBEStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.mipselstack method)": [[16, "smallworld.state.memory.stack.MIPSELStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.powerpc32stack method)": [[16, "smallworld.state.memory.stack.PowerPC32Stack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.powerpc64stack method)": [[16, "smallworld.state.memory.stack.PowerPC64Stack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.riscv64stack method)": [[16, "smallworld.state.memory.stack.RISCV64Stack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.stack method)": [[16, "smallworld.state.memory.stack.Stack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.x86stack method)": [[16, "smallworld.state.memory.stack.X86Stack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.xtensabestack method)": [[16, "smallworld.state.memory.stack.XTensaBEStack.to_bytes"]], "to_bytes() (smallworld.state.memory.stack.xtensaelstack method)": [[16, "smallworld.state.memory.stack.XTensaELStack.to_bytes"]], "breakpoint (class in smallworld.state.models)": [[17, "smallworld.state.models.Breakpoint"]], "hook (class in smallworld.state.models)": [[17, "smallworld.state.models.Hook"]], "memorymappedmodel (class in smallworld.state.models)": [[17, "smallworld.state.models.MemoryMappedModel"]], "model (class in smallworld.state.models)": [[17, "smallworld.state.models.Model"]], "pdbbreakpoint (class in smallworld.state.models)": [[17, "smallworld.state.models.PDBBreakpoint"]], "pythonshellbreakpoint (class in smallworld.state.models)": [[17, "smallworld.state.models.PythonShellBreakpoint"]], "abi (smallworld.state.models.model property)": [[17, "smallworld.state.models.Model.abi"]], "apply() (smallworld.state.models.breakpoint method)": [[17, "smallworld.state.models.Breakpoint.apply"]], "apply() (smallworld.state.models.hook method)": [[17, "smallworld.state.models.Hook.apply"]], "apply() (smallworld.state.models.memorymappedmodel method)": [[17, "smallworld.state.models.MemoryMappedModel.apply"]], "apply() (smallworld.state.models.model method)": [[17, "smallworld.state.models.Model.apply"]], "apply() (smallworld.state.models.pdbbreakpoint method)": [[17, "smallworld.state.models.PDBBreakpoint.apply"]], "apply() (smallworld.state.models.pythonshellbreakpoint method)": [[17, "smallworld.state.models.PythonShellBreakpoint.apply"]], "extract() (smallworld.state.models.breakpoint method)": [[17, "smallworld.state.models.Breakpoint.extract"]], "extract() (smallworld.state.models.hook method)": [[17, "smallworld.state.models.Hook.extract"]], "extract() (smallworld.state.models.memorymappedmodel method)": [[17, "smallworld.state.models.MemoryMappedModel.extract"]], "extract() (smallworld.state.models.model method)": [[17, "smallworld.state.models.Model.extract"]], "extract() (smallworld.state.models.pdbbreakpoint method)": [[17, "smallworld.state.models.PDBBreakpoint.extract"]], "extract() (smallworld.state.models.pythonshellbreakpoint method)": [[17, "smallworld.state.models.PythonShellBreakpoint.extract"]], "lookup() (smallworld.state.models.model class method)": [[17, "smallworld.state.models.Model.lookup"]], "model() (smallworld.state.models.model method)": [[17, "smallworld.state.models.Model.model"]], "name (smallworld.state.models.model property)": [[17, "smallworld.state.models.Model.name"]], "on_read() (smallworld.state.models.memorymappedmodel method)": [[17, "smallworld.state.models.MemoryMappedModel.on_read"]], "on_write() (smallworld.state.models.memorymappedmodel method)": [[17, "smallworld.state.models.MemoryMappedModel.on_write"]], "platform (smallworld.state.models.model property)": [[17, "smallworld.state.models.Model.platform"]], "smallworld.state.models": [[17, "module-smallworld.state.models"]]}})